<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Jake Gardner - Jake Gardner</title><description>Explorations in development.</description><link>http://localhost:2368/</link><generator>Ghost 0.5</generator><lastBuildDate>Mon, 11 Apr 2016 23:09:28 GMT</lastBuildDate><atom:link href="http://localhost:2368/author/jake/rss/" rel="self" type="application/rss+xml"/><ttl>60</ttl><item><title>Extract Fetch calls with Redux Middleware</title><description>&lt;p&gt;The first thing a lot of people coming to the React side-of-things ask is, "what about async actions?" (I did too). &lt;br&gt;
Since React is unopinionated on this point, you can do it however you like. &lt;/p&gt;

&lt;p&gt;However, since I use Redux for any substantial application I develop with React, I wanted to find a good pattern to use to handle asynchronous behavior that takes advantage of the plumbing available.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;I specifically use &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API"&gt;Web API Fetch&lt;/a&gt; in this article, but any HTTP request library could be substituted.&lt;/em&gt;&lt;/p&gt;

&lt;h4 id="asyncactioncreators"&gt;Async Action Creators&lt;/h4&gt;

&lt;p&gt;A pattern offered in the Redux documentation is to have some action creators perform these asynchronous actions for you. I initially used this pattern.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;A pre-requisite here is to include the &lt;a href="https://github.com/gaearon/redux-thunk"&gt;redux-thunk&lt;/a&gt; middleware. All this does is allow you to dispatch a function in addition to plain objects. See &lt;a href="https://github.com/gaearon/redux-thunk"&gt;this&lt;/a&gt; for more details.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Your asynchronous action creator will be something like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;export function fetchData(itemId) {  
    return dispatch =&amp;gt; {
        fetch(`${API}/items/${itemId}`, {
            method: "GET",
            headers: new Headers({
                "Authorization": `Bearer ${TOKEN}`
            })
        })
        .then( response =&amp;gt; response.json() )
        .then( json =&amp;gt; dispatch(fetchDataSuccess(json)) )
        .catch( error =&amp;gt; dispatch(fetchDataFailure(error)) );
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So in contrast to standard synchronous action creators which return a plain object, you return a function which takes dispatch as a parameter. Inside this function you perform your asynchronous behavior and potentially dispatch another function on completion.&lt;/p&gt;

&lt;p&gt;With any substantial application, the number of these kinds of actions can grow wildly. Furthermore, they can be quite verbose depending on what parameters we need to pass to Fetch. Being diligent programmers that we are, we recognize this is an opportunity to eliminate redundancy by extracting these Fetch calls elsewhere.&lt;/p&gt;

&lt;p&gt;You could easily create a module an just require it in every action file, but that approach also has some degree of repetition. Fortunately, Redux's middleware mechanism is designed for just this type of situation.&lt;/p&gt;

&lt;h4 id="fetchmiddleware"&gt;Fetch Middleware&lt;/h4&gt;

&lt;p&gt;Let's create a middleware that performs the Fetch if a Fetch parameter object exists in the action. We can define the properties of this object however we like. I have just included the most common Fetch parameters as well as success and failure handlers.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;const fetchMiddleware = store =&amp;gt; next =&amp;gt; action =&amp;gt; {  
    if (!action || !action.fetchConfig) {
        return next(action)
    }

    let dispatch = store.dispatch
    let config = action.fetchConfig
    dispatch(config.init)

    const path = config.path || "/"
    const method = config.method || "GET"
    const headers = config.headers
    const body = config.body
    const successHandler = config.success
    const failureHandler = config.failure

    fetch(path, {
        method: method,
        headers: headers,
        body: JSON.stringify(body)
    })
    .then( response =&amp;gt; response.json() )
    .then( json =&amp;gt; successHandler(json) )
    .catch( error =&amp;gt; failureHandler(error) )

}

export default fetchMiddleware  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A middleware is defined as a function that takes the store as a parameter, returns a function which takes the next middleware as parameter, which in turn returns a function that takes an action to run. (mind bent yet?)&lt;/p&gt;

&lt;p&gt;For a detailed walkthrough of how middleware works and a number of other use cases, see the excellent write-up  &lt;a href="http://redux.js.org/docs/advanced/Middleware.html"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So we just check for the existence of fetchConfig on the action and proceed if so. If not, then we hand off to the next middleware.&lt;/p&gt;

&lt;p&gt;Our function just takes apart the config object and sets any defaults as necessary. Then, execute the Fetch call and any handlers for Promise resolution.&lt;/p&gt;

&lt;p&gt;If your success/failure handler is another action, you can just change the then/catch block to:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    .then( json =&amp;gt; {
        dispatch(successHandler(json))
    })
    .catch( error =&amp;gt; dispatch(failureHandler(error)) )
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, we can include our middleware in the createStore method to ensure it's called as part of the action flow.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;let app = combineReducers(reducers)  
let store = createStore(  
  app,
  applyMiddleware(thunk, fetchMiddleware)
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Lastly, we just update the action creator to pass the fetchConfig object.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;export function fetchData(itemId) {  
    return {
        type: "FETCH_ITEM",
        fetchConfig: {
            path: `${API}/items/${itemId}`,
            method: "GET",
            headers: {
                "Authorization": `Bearer ${TOKEN}`
            }
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;</description><link>http://localhost:2368/consolidate-fetch-with-redux-middleware/</link><guid isPermaLink="false">3a909a86-bad6-4185-98bc-7ad281fa4b6f</guid><category>redux</category><dc:creator>Jake Gardner</dc:creator><pubDate>Mon, 11 Apr 2016 23:06:02 GMT</pubDate></item><item><title>February Reading</title><description>&lt;p&gt;In February, I was focused on Ruby. While familiar with the basics of Ruby and Rails, I wanted to dive deeper and discover any details that might be useful in projects I currently have in mind. Let's get into it!&lt;/p&gt;

&lt;h4 id="thewellgroundedrubyist"&gt;The Well-Grounded Rubyist&lt;/h4&gt;

&lt;p&gt;&lt;img src="http://localhost:2368/content/images/2016/03/wellgroundedrubyist.jpeg" alt=""&gt;
This book provides a comprehensive overview of the Ruby language, introducing a bit about The Ruby Way and features that are unique to the language.&lt;/p&gt;

&lt;p&gt;As an experienced user of other programming languages, I find Ruby easy to read and understand but there are a few features that are not obvious to the uninitiated. The Well-Grounded Rubyist shed light on those areas. Particularly relevant for me was discussion on when to use modules vs classes, and the logic behind Symbols. &lt;/p&gt;

&lt;p&gt;This book is a great step-up for the beginning Rubyist and likely a worthy reference for the more experienced.&lt;/p&gt;

&lt;h4 id="practicalobjectorienteddesigninruby"&gt;Practical Object-Oriented Design in Ruby&lt;/h4&gt;

&lt;p&gt;&lt;img src="http://localhost:2368/content/images/2016/03/practicaloodruby.jpg" alt=""&gt;
I was quite surprised to discover that this book not only shows object-oriented design techniques using Ruby, but is actually the most succinct and clear description of general OOD that I have read. I would recommend this book if you do any OOD, even if it's not in Ruby.&lt;/p&gt;

&lt;p&gt;Sandi Metz first introduces object-oriented principles and general coding best-practices, then takes simple examples through multiple evolutions of design and refactoring to broaden how you think of object-oriented design and expose flaws in common approaches.&lt;/p&gt;

&lt;p&gt;The key takeaway for me was to think of design in terms of messages rather than objects. If you only think of concrete entities when coming up with objects, you will miss some important objects and introduce unnecessary coupling. When you discover this later on, refactoring is painful and expensive. I have experienced this first-hand.&lt;/p&gt;</description><link>http://localhost:2368/february-reading/</link><guid isPermaLink="false">8249b9d6-d034-472a-8d32-3137f1354bda</guid><category>ruby</category><dc:creator>Jake Gardner</dc:creator><pubDate>Thu, 03 Mar 2016 07:19:36 GMT</pubDate></item><item><title>Routing with Redux</title><description>&lt;p&gt;Last weekend I put together my first Redux &lt;a href="https://github.com/jakegardner/redux-bookcatalog"&gt;application&lt;/a&gt; by refactoring an old demo. Once you get familiar, the architecture seems like a very natural way to build applications.&lt;/p&gt;

&lt;p&gt;One area that took some time to figure out was that of routing. While you can use &lt;a href="https://github.com/rackt/react-router"&gt;react-router&lt;/a&gt;, you need to do some extra wiring to get your state flowing as you would expect with vanilla React. &lt;/p&gt;

&lt;p&gt;There are two projects to provide a seamless integration with Redux architecture, &lt;a href="https://github.com/acdlite/redux-router"&gt;redux-router&lt;/a&gt; and &lt;a href="https://github.com/rackt/redux-simple-router"&gt;redux-simple-router&lt;/a&gt;. Redux-router, at time of writing, is considered experimental, so I went with the redux-simple-router. It integrates seamlessly with react-router and redux.&lt;/p&gt;

&lt;p&gt;I flet that some details were missing from documentation of integrating these projects, so I'm writing this simple how-to in the hopes that it helps someone else in the same situation in the future :)&lt;/p&gt;

&lt;h4 id="background"&gt;Background&lt;/h4&gt;

&lt;p&gt;Here I will provide some information on the components you need to get this working, namely react-router and redux-simple-router.&lt;/p&gt;

&lt;h6 id="reactrouter"&gt;React-router&lt;/h6&gt;

&lt;p&gt;The key rendered component of &lt;a href="https://github.com/rackt/react-router"&gt;react-router&lt;/a&gt; is the Router:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;Router /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Inside your Router element, you will put one or more Route elements: &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;Router&amp;gt;
    &amp;lt;Route path="/" component={App} /&amp;gt;
&amp;lt;/Router&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Each Route element can also have child routes:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;Router&amp;gt;
    &amp;lt;Route path="/" component={App}&amp;gt;
            &amp;lt;Route path="home" component={Home} /&amp;gt;
    &amp;lt;/Route&amp;gt;
&amp;lt;/Router&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you might expect, each Route element defines the expected route and the component should be rendered when hitting that route.&lt;/p&gt;

&lt;p&gt;Where do the routes get rendered?&lt;/p&gt;

&lt;p&gt;In the render method of a component with child routes (e.g. App in the above example), you will add something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;div&amp;gt;
    {this.props.children}
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;{this.props.children}&lt;/code&gt; identifies where in the render method child routes should be rendered. So for the /home route, the Home component would replace the contents of this div. &lt;/p&gt;

&lt;h6 id="reduxsimplerouter"&gt;Redux-simple-router&lt;/h6&gt;

&lt;p&gt;Redux-simple-router simply (ha!) stores your router state in your Redux store. So, whereever you have connected a React component to your store, you can access routing parameters, path etc as a property of state i.e. &lt;code&gt;state.router&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This is enabled by this statement:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;syncReduxAndRouter(history, store, (state) =&amp;gt; state.router);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This should be included where you create your store. Don't worry; there is an example coming.&lt;/p&gt;

&lt;h4 id="letsmakethishappen"&gt;Let's make this happen&lt;/h4&gt;

&lt;p&gt;Now that we have some fundamental understanding, let's apply it.&lt;/p&gt;

&lt;h6 id="installreactrouterreduxsimplerouter"&gt;Install react-router, redux-simple-router&lt;/h6&gt;

&lt;p&gt;If you haven't already, run these:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm install --save react-router
npm install --save redux-simple-router
&lt;/code&gt;&lt;/pre&gt;

&lt;h6 id="setupreduxsimplerouter"&gt;Setup redux-simple-router&lt;/h6&gt;

&lt;p&gt;The following should be in your application entry point file (I call mine index.js).&lt;/p&gt;

&lt;p&gt;This is where the store is created, and the syncReduxAndRouter function is called.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import React, { Component, PropTypes } from "react";
import { render } from "react-dom";
import { createHistory, useBasename } from "history";
import { syncReduxAndRouter } from "redux-simple-router";
import routes from "./routes";
import Root from "./containers/Root";
import configureStore from "./store/configureStore";

const history = useBasename(createHistory)({
  basename: JSON.stringify(process.env.BASENAME || "/")
});
const store = configureStore();

syncReduxAndRouter(history, store, (state) =&amp;gt; state.router);

render(
  &amp;lt;Root history={history} routes={routes} store={store} /&amp;gt;,
  document.getElementById("root")
);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After syncing redux and the router, the routes and store are passed as props to the Root container (component).&lt;/p&gt;

&lt;p&gt;The store parameter is the &lt;a href="http://rackt.org/redux/docs/api/Store.html"&gt;Redux store&lt;/a&gt; returned by createStore(). The history parameter is created by createHistory(). The routes parameter are the routes defined as &lt;a href="https://facebook.github.io/jsx/"&gt;JSX&lt;/a&gt; in another file (see below). These can also be specified inline.&lt;/p&gt;

&lt;h6 id="addrouterelement"&gt;Add Router element&lt;/h6&gt;

&lt;p&gt;In the Root component file, and inside of your &lt;a href="http://localhost:2368/"&gt;Provider&lt;/a&gt; element, add the Router element:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;Provider store={this.props.store}&amp;gt;
    &amp;lt;Router history={this.props.history}&amp;gt;
      {this.props.routes}
    &amp;lt;/Router&amp;gt;
&amp;lt;/Provider&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The props in this snippet are the same that we defined and passed in the previous code sample.&lt;/p&gt;

&lt;p&gt;So the full Root component source should look like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  import React, { Component, PropTypes } from "react";
  import { Provider } from "react-redux";
  import { Router } from "react-router";

  class Root extends Component {
    render() {
      return (
        &amp;lt;Provider store={this.props.store}&amp;gt;
          &amp;lt;Router history={this.props.history}&amp;gt;
            {this.props.routes}
          &amp;lt;/Router&amp;gt;
        &amp;lt;/Provider&amp;gt;
      );
    }
  }
  Root.propTypes = {
    history: PropTypes.object.isRequired,
    routes: PropTypes.element.isRequired,
    store: PropTypes.object.isRequired
  };

export default Root;
&lt;/code&gt;&lt;/pre&gt;

&lt;h6 id="configureroutes"&gt;Configure routes&lt;/h6&gt;

&lt;p&gt;Now to define the routes. Add a top-level route and any needed sub-routes: &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;Route path="/" component={App}&amp;gt;
    &amp;lt;IndexRoute component={Home} /&amp;gt;
    &amp;lt;Route path="/book/:bookId" component={Detail} /&amp;gt;
&amp;lt;/Route&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The parent &lt;a href="https://github.com/rackt/react-router/blob/latest/docs/guides/basics/RouteConfiguration.md"&gt;Route&lt;/a&gt; element with the root path encloses any other routes in your application.&lt;/p&gt;

&lt;p&gt;The &lt;a href="https://github.com/rackt/react-router/blob/latest/docs/guides/basics/IndexRoutes.md"&gt;IndexRoute&lt;/a&gt; is a special element that allows you to specify which component should receive the request with no additional route information, i.e. the root path. Even though this element specifies the destination, I found that the path and component properties in the parent Route element were required.&lt;/p&gt;

&lt;p&gt;Finally, the child Route element specifies a sub-route of the root with a route parameter indicated by the leading colon. This parameter will be available as &lt;code&gt;state.router.params.bookId&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The full routes source file should look like: &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import React, { Component, PropTypes } from "react";
import { Route, IndexRoute } from "react-router";
import App from "../components/App";
import Home from "../components/Home";
import Detail from "../components/Detail";

export default (
      &amp;lt;Route path="/" component={App}&amp;gt;
        &amp;lt;IndexRoute component={Home} /&amp;gt;
        &amp;lt;Route path="/book/:bookId" component={Detail} /&amp;gt;
      &amp;lt;/Route&amp;gt;
);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Save this as &lt;code&gt;/routes/index.js&lt;/code&gt; or wherever is appropriate, but make sure to update the include path in the Root component file.&lt;/p&gt;

&lt;h6 id="modifystateparameterincomponents"&gt;Modify state parameter in components&lt;/h6&gt;

&lt;p&gt;The final step is to check any components that receive state. Before the routing configuration, your state object may have had the properties you defined at the root of the object. Afterwards, I found that the state object now includes a child object for the router and one for the reducer. Whatever state is returned by the &lt;a href="http://rackt.org/redux/docs/basics/Reducers.html"&gt;reducer&lt;/a&gt; is a child of this child reducer object, like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;state = {
    router: {
        changeId: 1,
        path: "/book/12",
        replace: false,
        state: ...
    },
    reducer: {
        *state here*
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The reducer will be named after your reducer. Update your props declarations or mapStateToProps methods as appropriate to ensure that &lt;a href="http://rackt.org/redux/docs/basics/DataFlow.html"&gt;state flows&lt;/a&gt; to your components as you expect.&lt;/p&gt;</description><link>http://localhost:2368/routing-with-redux/</link><guid isPermaLink="false">0213fc9b-798c-4a10-a5e2-93ef5e7b4d8f</guid><category>react</category><category>redux</category><dc:creator>Jake Gardner</dc:creator><pubDate>Tue, 12 Jan 2016 05:22:30 GMT</pubDate></item><item><title>Testing CLI Tools</title><description>&lt;p&gt;While I was developing the &lt;a href="https://www.npmjs.com/package/s3syncr"&gt;s3syncr&lt;/a&gt; command-line (CLI) utility, I discovered I needed a way to test the function of the program as a whole. There are separate tests for the parsing of input to the program, but I wanted to verify the interaction of all the components as well as the output. &lt;/p&gt;

&lt;p&gt;Since console output is the only interface given to the user in a CLI tool, consistent output is critical.&lt;/p&gt;

&lt;p&gt;So, I made use of Node to run the utility inside a Mocha test.&lt;/p&gt;

&lt;h4 id="nodeexec"&gt;Node exec()&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;describe("No parameters", function() {
    it("should output No operation", function(done) {
        require('child_process').exec("node index.js",  
            function(err, stdout, stderr) {
              assert(err);
              assert.strictEqual(stderr, "No operation\n");
              done();  
        });
    });
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This test uses the Node-native &lt;a href="https://nodejs.org/api/child_process.html#child_process_child_process_exec_command_options_callback"&gt;child_process.exec&lt;/a&gt; method which runs a shell command and gives you access to what is written to console.log() and console.error() through the &lt;code&gt;stdout&lt;/code&gt; and &lt;code&gt;stderr&lt;/code&gt; parameters, respectively. You can also pass in an options object to specify current working directory, environment variables and so on.&lt;/p&gt;

&lt;h4 id="assertingoutput"&gt;Asserting Output&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;assert.strictEqual(stderr, "No operation\n");
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now that console output is available, to execute tests you just need to assert on &lt;code&gt;stdout&lt;/code&gt; or &lt;code&gt;stderr&lt;/code&gt; string content. &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;assert(err);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can also use the &lt;code&gt;err&lt;/code&gt; parameter to check for uncaught exceptions.&lt;/p&gt;

&lt;h4 id="automatinginput"&gt;Automating Input&lt;/h4&gt;

&lt;p&gt;Using exec() in the before and after &lt;a href="https://mochajs.org/#hooks"&gt;test hooks&lt;/a&gt; to handle varying test input gives you a path towards comprehensive automated testing!&lt;/p&gt;

&lt;p&gt;For example, you can have some tests that create a file, run the test, and then remove the file afterwards.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;beforeEach(function(done) {
    require('child_process').exec("echo 'test' &amp;gt; test.txt", 
        function(err, stdout, stderr) {
            done();
    });
});

afterEach(function(done) {
    require('child_process').exec("rm test.txt", 
        function(err, stdout, stderr) {
            done();
    });
});

it("should output something", function(done) {
    ...
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id="wrapup"&gt;Wrap Up&lt;/h4&gt;

&lt;p&gt;If you write any kind of CLI, this is a simple way to verify output.&lt;/p&gt;

&lt;p&gt;Honestly, this kind of test could be done in any scripting language, but using Node and Mocha allowed me to integrate with the rest of the testing suite.&lt;/p&gt;</description><link>http://localhost:2368/testing-cli-tools/</link><guid isPermaLink="false">c1447f66-a81e-4c93-b108-e6489972050b</guid><category>node</category><category>testing</category><dc:creator>Jake Gardner</dc:creator><pubDate>Tue, 15 Dec 2015 13:17:10 GMT</pubDate></item><item><title>Publish your Angular app to Heroku</title><description>&lt;p&gt;&lt;a href="https://www.heroku.com/"&gt;Heroku&lt;/a&gt; is great for hosting your development projects (particularly in-progress). In fact, I recommend publishing your project sooner rather than later so that you don't have any surprises in deployment later on. &lt;/p&gt;

&lt;p&gt;Getting Heroku to serve your Angular application is pretty simple but does require a little bit of configuration. Moreover, these same steps could work for any front-end project, not just Angular.&lt;/p&gt;

&lt;p&gt;This article assumes: &lt;br&gt;
You have a Heroku account &lt;br&gt;
You have the &lt;a href="https://toolbelt.heroku.com/"&gt;Heroku Toolbelt&lt;/a&gt; installed on your machine&lt;/p&gt;

&lt;h4 id="addexpress"&gt;Add Express&lt;/h4&gt;

&lt;p&gt;Firstly, you'll want to &lt;code&gt;npm install --save express gzippo&lt;/code&gt; in your project directory.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.npmjs.com/package/express"&gt;Express&lt;/a&gt; is a node-based web server which Heroku will use to serve your application files.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.npmjs.com/package/gzippo"&gt;Gzippo&lt;/a&gt; allows you to compress (gzip) the files before they are sent on the wire to reduce the size, improving performance.&lt;/p&gt;

&lt;h4 id="createanexpressserverfile"&gt;Create an Express server file&lt;/h4&gt;

&lt;p&gt;Create a file named &lt;code&gt;web.js&lt;/code&gt; in your project root. In this file, add the following lines:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var gzippo = require('gzippo');
var express = require('express');
var morgan = require('morgan');
var app = express();

app.use(morgan('dev'));
app.use(gzippo.staticGzip("" + __dirname + "/dist"));

app.route('/*').get( function(req, res) {
    return res.sendFile(__dirname + "/dist/index.html");
});

app.listen(process.env.PORT || 5000);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This file includes necessary dependencies, and configures Express to respond to all requests with the file at the path in the res.sendFile method. You will need to update this path according to where your final application bundle resides.&lt;/p&gt;

&lt;h4 id="addprocfileandupdatepackagejson"&gt;Add Procfile and Update package.json&lt;/h4&gt;

&lt;p&gt;Heroku relies on a file called &lt;code&gt;Procfile&lt;/code&gt; to know how to start your application. Note that &lt;a href="https://devcenter.heroku.com/articles/procfile"&gt;Procfile&lt;/a&gt; has no file extension. &lt;br&gt;
To this file, you just need to add &lt;code&gt;web: node web.js&lt;/code&gt;. Web lets Heroku know that you want to serve HTTP content, and the remainder is command to invoke node with the Express file you created in the previous step.&lt;/p&gt;

&lt;h4 id="pushtoheroku"&gt;Push to Heroku&lt;/h4&gt;

&lt;p&gt;Before you push to Heroku, it's always a good idea to run &lt;code&gt;heroku local&lt;/code&gt; to &lt;a href="https://devcenter.heroku.com/articles/heroku-local"&gt;make sure&lt;/a&gt; your configuration is correct. If everything looks good then you can &lt;code&gt;git push heroku master&lt;/code&gt;. If that completes successfully you are good to go!&lt;/p&gt;</description><link>http://localhost:2368/publish-your-angular-app-to-heroku/</link><guid isPermaLink="false">15e168b2-d1c8-40ad-95ce-56b41f50e936</guid><category>node</category><category>angular</category><category>heroku</category><dc:creator>Jake Gardner</dc:creator><pubDate>Sat, 05 Dec 2015 05:45:41 GMT</pubDate></item><item><title>Be A Software Craftsman</title><description>&lt;p&gt;I recently read &lt;a href="http://www.mcbreen.ab.ca/SoftwareCraftsmanship/"&gt;Software Craftsmanship&lt;/a&gt; by Pete McBreen. If you haven't read this book, run out and get a copy fast!&lt;/p&gt;

&lt;p&gt;Pete suggests that software development should adopt an apprenticeship model. Simply teaching people language constructs in a classroom does not alone make them developers. Furthermore, people learn best by working with others more experienced than themselves. Pairing software "apprentices" with software "craftsmen" will result in a higher standard skill level in developers.&lt;/p&gt;

&lt;p&gt;On your software developer journey, once you get past learning syntax and frameworks and patterns, you think more broadly about how you can improve. The road to craftsmanship is how you can do that.&lt;/p&gt;

&lt;h4 id="howtobeasoftwarecraftsman"&gt;How to be a Software Craftsman&lt;/h4&gt;

&lt;h6 id="gettoknowyourtools"&gt;Get to know your tools&lt;/h6&gt;

&lt;p&gt;You can't expect to deliver high-quality solutions quickly if you are spending a lot of time figuring out how to use the tools. &lt;/p&gt;

&lt;p&gt;Invest the time in a set of tools you enjoy using, but that also have a large community so you can be sure that they will be around.&lt;/p&gt;

&lt;p&gt;Corollary to this is...&lt;/p&gt;

&lt;h6 id="dontfollowthehype"&gt;Don't follow the hype&lt;/h6&gt;

&lt;p&gt;Especially since the rebirth of Javascript, we have all been inundated with new frameworks, build tools, text editors, and every kind of widget inbetween.&lt;/p&gt;

&lt;p&gt;You must exercise good judgment about what to learn. If you are constantly jumping on the latest bandwagon, you will never achieve mastery of your toolset (see above).&lt;/p&gt;

&lt;h6 id="findamentor"&gt;Find a mentor&lt;/h6&gt;

&lt;p&gt;Perhaps the most important element in your path towards mastery is finding those more experienced than yourself and working with them.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Practice without feedback just reinforces errors&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Just as with any handcraft, art, or music, learning through imitation is a powerful force.&lt;/p&gt;

&lt;h6 id="knowthewholepicture"&gt;Know the whole picture&lt;/h6&gt;

&lt;p&gt;The industry seems to encourage role-specialization. While you should not attempt to master every &lt;em&gt;tool&lt;/em&gt; or &lt;em&gt;language&lt;/em&gt;, being as familiar with the end-to-end process of software development can only benefit you.&lt;/p&gt;

&lt;p&gt;You're a Front-ender? You absolutely should know how API's are written, and what has to take place for data to reach the client from the server. &lt;/p&gt;

&lt;p&gt;You're a Back-ender? You need to understand how the design is hindered or empowered by what you deliver from the server. &lt;/p&gt;

&lt;p&gt;All web and mobile developers need to be keen on UX/Design as well. Our world is ever-more-focused on well-designed products, and without user-centric thinking our development efforts are fruitless.&lt;/p&gt;

&lt;h6 id="neverstoplearning"&gt;Never stop learning&lt;/h6&gt;

&lt;p&gt;While the general flux in our industry creates a lot of noise as far as what to learn, it's important to keep an eye on the general trajectory. &lt;/p&gt;

&lt;p&gt;Fixed-width website designs gave way to fluid, responsive ones.&lt;/p&gt;

&lt;p&gt;Fully server-generated web pages gave way to mostly client-based ones.&lt;/p&gt;

&lt;p&gt;And recently more and more developers are moving from object-oriented languages to functional ones.&lt;/p&gt;

&lt;p&gt;Make learning a habit.&lt;/p&gt;

&lt;h6 id="wrapup"&gt;Wrap Up&lt;/h6&gt;

&lt;p&gt;Being a software craftsman is about striving for expertise and seeking a breadth and depth of experience so that you can deliver the highest-quality solutions.&lt;/p&gt;

&lt;p&gt;It's also about cultivating a intuition, knowing when it makes sense to deviate from a process or how to choose which technology to use.&lt;/p&gt;

&lt;p&gt;Finally, it's about taking real pride in your work so that you are constantly looking for ways you can improve.&lt;/p&gt;</description><link>http://localhost:2368/be-a-software-craftsman/</link><guid isPermaLink="false">9bf0addd-0189-4c53-9495-8fd102f95882</guid><dc:creator>Jake Gardner</dc:creator><pubDate>Wed, 11 Nov 2015 13:50:56 GMT</pubDate></item><item><title>Configuration files for your Node.js apps</title><description>&lt;p&gt;For any Node.js application that interacts with external resources (APIs, databases, etc), you will likely need some environment-specific configuration. Now, hopefully you are not hard-coding these values!&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;            // BAD! 
            mongodb.hostname = "databaseserver";
            mongodb.port = "27017";
            mongodb.database = "mydatabase";
            ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Storing these values in an external file makes it easy to change environments without having to modify the code. Fortunately, &lt;a href="https://nodejs.org/api/modules.html#modules_modules"&gt;require&lt;/a&gt; makes it easy to load values from .js or .json files.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;            // Better!
            var config = require('./dbconfig.js');

            mongodb.hostname = config.hostname;
            mongodb.port = config.port;
            mongodb.database = config.database;
            ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Require will parse either .js or .json files and return an object you can use in your code. &lt;/p&gt;

&lt;p&gt;Why choose .js or .json? I prefer to use .js for configuration while only use .json  for data (for example, &lt;a href="https://github.com/junit-team/junit/wiki/Test-fixtures"&gt;test fixtures&lt;/a&gt;). However, both formats achieve the same result.&lt;/p&gt;

&lt;h6 id="jsformat"&gt;.js format&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;            exports.hostname = "myserver";
            exports.port = "27017";
            exports.database = "mydatabase";
&lt;/code&gt;&lt;/pre&gt;

&lt;h6 id="jsonformat"&gt;.json format&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;            {
              "hostname": "myserver",
              "port": "27017",
              "database": "mydatabase"
            }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Knowing how easy this is to use, hope you will make use of external configuration files in your Node.js apps!&lt;/p&gt;</description><link>http://localhost:2368/configuration-files-for-your-node-js-apps/</link><guid isPermaLink="false">5a2060fe-ca31-46b7-ae7a-9fb852327856</guid><category>node</category><dc:creator>Jake Gardner</dc:creator><pubDate>Sun, 01 Nov 2015 13:19:33 GMT</pubDate></item><item><title>Podcasts for Web Developers</title><description>&lt;p&gt;There are many resources to learn about web development and keep abreast of changes -- books, blogs, conferences, video tutorials. I make use of all of these, however podcasts are great in that you can listen while you're on the go. Take advantage of that time commuting/walking/standing in line to learn something.&lt;/p&gt;

&lt;p&gt;These are some of my favorites. They cover a range of development related topics, from specific languages to developer worklife and career management.&lt;/p&gt;

&lt;h4 id="giantrobotssmashingintoothergiantrobots"&gt;Giant Robots [Smashing Into Other Giant Robots]&lt;/h4&gt;

&lt;p&gt;&lt;a href="http://localhost:2368/"&gt;Giant Robots&lt;/a&gt; is a podcast produced by &lt;a href="http://thoughtbot.com/"&gt;Thoughtbot&lt;/a&gt;. If you don't know Thoughtbot -- go check them out! They have released many open-source tools, have an informative &lt;a href="https://robots.thoughtbot.com/"&gt;blog&lt;/a&gt;, as well as a &lt;a href="https://upcase.com/"&gt;learning community&lt;/a&gt; to help developers upgrade their skills.&lt;/p&gt;

&lt;p&gt;Giant Robots was originally more Ruby/Rails focused, but lately has been more about developer process, interviews with noteworthy developers etc. They also keep episodes less than 40 minutes so that you can be sure to finish listening in one commute.&lt;/p&gt;

&lt;p&gt;Giant Robots also produce another more technical podcast called &lt;a href="http://bikeshed.fm/"&gt;The Bike Shed&lt;/a&gt;. Worth a look if you're hungry for more content.&lt;/p&gt;

&lt;h4 id="javascriptjabber"&gt;Javascript Jabber&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://devchat.tv/js-jabber"&gt;Javascript Jabber&lt;/a&gt; is a round-table discussion on the latest developments in the Javascript world. Joe Eames (&lt;a href="http://www.ng-conf.org/"&gt;ngconf&lt;/a&gt; founder) is a weekly co-host.&lt;/p&gt;

&lt;p&gt;This podcast tends to get deeply techical and sometimes runs a bit long, but I find it invaluable to learn about libraries or features I haven't had a chance to try myself.&lt;/p&gt;

&lt;h4 id="developertea"&gt;Developer Tea&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://developertea.com/"&gt;Developer Tea&lt;/a&gt; may be my favorite of this bunch, simply for the reason that the host &lt;a href="http://localhost:2368/"&gt;&lt;/a&gt; takes on issues that are not discussed in typical development podcasts. Topics include time management, career progression, choosing what to learn, how to handle interviews, and many more.&lt;/p&gt;

&lt;p&gt;Most episodes are fifteen minutes or less so you have no excuse not to fit this into your day somewhere!&lt;/p&gt;

&lt;h4 id="shoptalkshow"&gt;Shop Talk Show&lt;/h4&gt;

&lt;p&gt;&lt;a href="http://shoptalkshow.com/"&gt;Shop Talk Show&lt;/a&gt; is probably better suited for pure front-enders or web designers, but nonetheless is unparalleled in content on design, useability, web standards etc. It is made only more awesome by the sense of humor of hosts Chris Coyier (&lt;a href="https://css-tricks.com/"&gt;CSS Tricks&lt;/a&gt;) and Dave Rupert.&lt;/p&gt;

&lt;h4 id="the4hourworkweek"&gt;The 4-Hour Workweek&lt;/h4&gt;

&lt;p&gt;Ok, this is not on web development! But I had to mention the &lt;a href="http://fourhourworkweek.com/podcast/"&gt;podcast&lt;/a&gt; of writer Tim Ferriss. In each episode, Tim interviews world-class performers in a broad array of fields. Athletes, entrepreneurs, investors, producers, you name it.&lt;/p&gt;

&lt;p&gt;I find this is relevant to web developers in the sense of finding people (developers) you admire, deconstructing how they became successful and doing your best to emulate. It is hard not to draw inspiration from each of the interviewees stories' to set ambitious goals for oneself and relentlessly pursue them. &lt;/p&gt;

&lt;p&gt;If all web developers adopted this philosophy, our field would be all the better for it.&lt;/p&gt;</description><link>http://localhost:2368/podcasts-for-web-developers/</link><guid isPermaLink="false">9e9d361a-a572-407c-a6f0-431f830666ce</guid><category>resources</category><dc:creator>Jake Gardner</dc:creator><pubDate>Sun, 25 Oct 2015 13:40:58 GMT</pubDate></item><item><title>Implementing Token-Based Authentication using Angular + Node.js</title><description>&lt;p&gt;You are building an authenticated Angular application with a REST backend. You need to restrict access to your server. What do you do?&lt;/p&gt;

&lt;p&gt;Token-based authentication is a very common solution to this problem. Many prominent public API's such as Twitter and Instagram utilize token-based authentication.&lt;/p&gt;

&lt;p&gt;But first, you may ask...&lt;/p&gt;

&lt;h3 id="whataretokens"&gt;What are tokens?&lt;/h3&gt;

&lt;p&gt;A token is a server-generated string that is uniquely associated with a user and identifies them as authenticated. The string can encode certain user-specific informated such as username and profile.&lt;/p&gt;

&lt;p&gt;When a user makes a request to your server, they can provide their token as proof that the server has verified their access.&lt;/p&gt;

&lt;h3 id="whyaretheypreferred"&gt;Why are they preferred?&lt;/h3&gt;

&lt;p&gt;Previously, session-based authentication was the most popular. It is still used in some scenarios, but is more complicated to configure, scale, and secure. Information about logged-in users must be kept in memory, oftentimes in a database such as &lt;a href="http://redis.io/"&gt;Redis&lt;/a&gt;. When a request is received, the user's information must be queried in the session database. &lt;/p&gt;

&lt;p&gt;There are problems with this approach. If the server crashes, this information is lost. The user must re-authenticate and the server must re-construct the session profile. Also, since session information must be stored for every user, with a high volume of users you can quickly run into memory issues.&lt;/p&gt;

&lt;p&gt;Whereas session-based authentication is &lt;em&gt;stateful&lt;/em&gt;, token-based authentication follows a &lt;em&gt;stateless&lt;/em&gt; paradigm. This just means that the server does not keep any information about users in memory. When a request is received, the token is validated. If it passes, the request is completed and a result returned. If not, the server can return an error. No in-memory database is required.&lt;/p&gt;

&lt;p&gt;Authentication is a topic with many, many considerations. If you are looking to understand more of why and how tokens work, check out &lt;a href="https://scotch.io/tutorials/the-ins-and-outs-of-token-based-authentication"&gt;this&lt;/a&gt; article over on &lt;a href="https://scotch.io/tutorials/the-ins-and-outs-of-token-based-authentication"&gt;scotch.io&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Now, let's get into the how-to.&lt;/p&gt;

&lt;h3 id="serversidesetupnodejs"&gt;Server-side setup (Node.js)&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://github.com/auth0/node-jsonwebtoken"&gt;Node-jsonwebtoken&lt;/a&gt; is the de-facto module for token functionality in a node application. &lt;/p&gt;

&lt;p&gt;To grab that, you just need to:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm install --save jsonwebtoken
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In your node server file, add:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var jwt = require('jsonwebtoken');
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You also need to set a json web token 'secret'. This string is used to make the tokens that your server generates unique, so preferably make it complex!&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var jwtSecret = 'jsonWebTokensAreAGreatIdea!';
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now all that's left is to create the token!&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var token = jwt.sign('username', jwtSecret, {
    expiresInMinutes: 60
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In place of the 'username' string, you could use an object instead. The second parameter is the secret you configured earlier. The last one is an options object (of which &lt;a href="https://www.npmjs.com/package/jsonwebtoken#jwt-sign-payload-secretorprivatekey-options"&gt;there are many available&lt;/a&gt;); here we just set the expiration time of the token in minutes.&lt;/p&gt;

&lt;p&gt;All of the preceding code together in an Express route:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var app = require('express')();
var jwt = require('jsonwebtoken');
var jwtSecret = 'jsonWebTokensAreAGreatIdea!'; 

app.get('/auth', function (req, res) {
  var username = req.query.username;
  var token = jwt.sign(username, jwtSecret, {
    expiresInMinutes: 60
  });

  res.send(token);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now when  a request is received at &lt;a href="http://yourserver/auth?username=jakeg"&gt;http://yourserver/auth?username=jakeg&lt;/a&gt;, a token will be signed and returned to the client.&lt;/p&gt;

&lt;h3 id="clientsidesetupangular"&gt;Client-side setup (Angular)&lt;/h3&gt;

&lt;p&gt;On the Angular side, you first need to setup the request to retrieve the token. Here, I will just use $http.get():&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$http.get('http://yourserver/auth', { 
    params: { username: 'username' } 
  }).success( function(data, status, headers, config) {
    // save the token for later queries
    localStorage.token = data.token;
  });
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The first parameter to $http.get is the API endpoint that will return the token. The second passes the username within a 'params' object. We save the resulting token in localStorage to persist on the client, but you could pass the token anywhere else in your application deemed appropriate.&lt;/p&gt;

&lt;p&gt;If you want to retrieve the information encoded in the token, you need a couple extra functions to parse and decode:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function urlBase64Decode(str) {
  var output = str.replace('-', '+').replace('_', '/');
  switch (output.length % 4) {
    case 0:
      break;
    case 2:
      output += '==';
      break;
    case 3:
      output += '=';
      break;
    default:
      throw 'Illegal base64url string!';
  }
  return window.atob(output);
}

function getClaimsFromToken(token) {
  var response = {};

  if (typeof token !== "undefined") {
    var encoded = token.split(".")[1];
    response = JSON.parse(urlBase64Decode(encoded));
  }
  return response;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The first function decodes the token string using base64. The second takes the chunk containing encoded data and parses it into a JSON object.&lt;/p&gt;

&lt;p&gt;To include the token on remote requests (required!), just add it as a parameter. With Angular, you have two options:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://docs.angularjs.org/api/ng/service/$http"&gt;$http.get()&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$http.get('http://myapi.com/auth', 
  { params: { username: 'username' } } );
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href="https://docs.angularjs.org/api/ngResource/service/$resource"&gt;$resource service&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;myResource.bind( { token: localStorage.getItem("token") } );
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;You can also add it as a HTTP Header parameter. However, this will send your token on every HTTP request your application makes. &lt;em&gt;Only&lt;/em&gt; do this if you will only make remote requests to &lt;em&gt;your&lt;/em&gt; API. Sending your token elsewhere can interfere with communication and is also giving away keys to your service!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;That's it! Now when you make remote requests, the token your application retrieved earlier will be sent along to authenticate your request.&lt;/p&gt;

&lt;h3 id="wrapup"&gt;Wrap Up&lt;/h3&gt;

&lt;p&gt;Implementing token-based authentication is a good solution toward keeping your application and services secure. And fortunately, the Node and Angular ecosystem makes this fairly simple to setup!&lt;/p&gt;</description><link>http://localhost:2368/implement-token-based-authentication-using-angular-node-js/</link><guid isPermaLink="false">71bd1a9b-ae33-4625-9938-5083eae600d9</guid><category>node</category><category>angular</category><category>token-based auth</category><dc:creator>Jake Gardner</dc:creator><pubDate>Fri, 24 Jul 2015 11:53:14 GMT</pubDate></item><item><title>Authenticate User with Instagram API</title><description>&lt;p&gt;Recently, I was working with the Instagram API for one of my side-projects. This is a short walkthrough of how to implement the &lt;a href="https://instagram.com/developer/authentication/"&gt;server-side flow&lt;/a&gt; of Instagram user authentication in Node.js. &lt;/p&gt;

&lt;p&gt;In order for your application to make queries to the &lt;a href="https://instagram.com/developer"&gt;Instagram API&lt;/a&gt; on your user's behalf, they must authorize your application by logging in with their Instagram credentials. Your application will receive an authorization code in return, and you then need to authenticate this code with Instagram to receive an access token. The access token grants you access to query the REST API.&lt;/p&gt;

&lt;p&gt;Instagram requires that the authentication query be sent as form data (&lt;a href="http://www.w3.org/TR/html5/forms.html#url-encoded-form-data"&gt;x-www-form-urlencoded&lt;/a&gt;) instead of JSON. The documentation shows how to make the query using curl -- since I was doing this in Node, I installed a module called &lt;a href="http://unirest.io/nodejs.html"&gt;unirest&lt;/a&gt;. Here's the code:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var unirest = require('unirest');
unirest.post("https://api.instagram.com/oauth/access_token")
      .send("client_id=XXXXXXXXXXXXXXXXXXXXXX")
      .send("client_secret=XXXXXXXXXXXXXXXXXX")
      .send("grant_type=authorization_code")
      .send("redirect_uri=http://url.me")
      .send("code=XXXXXXXXXXXXXXXXXXXXXXXXXXXX")
      .end(function (response) {
        console.log(response.body);
      }); 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In response, you will receive a JSON object similar to the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    {
        "access_token":"fb2e77d.47a0479900504cb3ab4a1f626d174d2d",
        "user": {
            "id": "1000000",
            ...
        }
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When you query one of the Instagram API endpoints, include the access_token as a query (URL) parameter.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;unirest.get("https://api.instagram.com/v1/users/self/feed")
     .query("access_token=fb2e77d.47a0479900504cb3ab4a1f626d174d2d")
      .end(function(response) {
        console.log(response);
      });
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You will probably consume the response instead of log to the console, but you get the idea!&lt;/p&gt;</description><link>http://localhost:2368/authenticate-user-with-instagram-api/</link><guid isPermaLink="false">35c2dd0d-174e-431e-adbf-f18c4cfcc07c</guid><category>node</category><dc:creator>Jake Gardner</dc:creator><pubDate>Fri, 05 Jun 2015 11:34:45 GMT</pubDate></item><item><title>Publish a blog on GitHub Pages with Ghost and Buster</title><description>&lt;p&gt;It's no secret: I am using &lt;a href="http://ghost.org/"&gt;Ghost&lt;/a&gt; as a blogging engine (see footer). This is a quick walk-through of how I publish this blog to GitHub Pages using Buster.&lt;/p&gt;

&lt;p&gt;This article assumes: &lt;br&gt;
You have &lt;a href="http://ghost.org/"&gt;Ghost&lt;/a&gt; setup locally. &lt;br&gt;
You have a &lt;a href="https://github.com/"&gt;GitHub&lt;/a&gt; account.&lt;/p&gt;

&lt;h3 id="getbuster"&gt;Get Buster&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Install pip. &lt;br&gt;
&lt;ul&gt;&lt;li&gt;Download the get-pip.py script from &lt;a href="https://pip.pypa.io/en/latest/installing.html#install-pip"&gt;https://pip.pypa.io/en/latest/installing.html#install-pip&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Run &lt;code&gt;python get-pip.py --no-index --find-links=/local/copies&lt;/code&gt;.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Install buster. &lt;br&gt;
&lt;ul&gt;&lt;li&gt;Run &lt;code&gt;pip install buster&lt;/code&gt;.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id="generatestaticsite"&gt;Generate static site&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;If you have not used buster before, run &lt;code&gt;buster setup&lt;/code&gt;. It will ask you for the URL of your GitHub repository.  &lt;/li&gt;
&lt;li&gt;Start your local ghost instance with &lt;code&gt;npm start&lt;/code&gt; in your ghost directory. This serves your ghost content at &lt;a href="http://127.0.0.1:2368/"&gt;http://127.0.0.1:2368&lt;/a&gt;.  &lt;/li&gt;
&lt;li&gt;Run &lt;code&gt;buster generate --domain=http://127.0.0.1:2368 --dir=/path/to/store/static/content&lt;/code&gt;. The path you specify in the dir parameter will now contain a static copy of your ghost content.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id="pushtogithub"&gt;Push to GitHub&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Run &lt;code&gt;git init&lt;/code&gt; in your static content directory.  &lt;/li&gt;
&lt;li&gt;Add a remote linking to a repository on your GitHub account &lt;code&gt;git remote add https://github.com/yourusername/repo.git&lt;/code&gt;.  &lt;/li&gt;
&lt;li&gt;Create a gh-pages branch with &lt;code&gt;git checkout -b gh-pages&lt;/code&gt;. This is critical! If you do not push your changes to this version, GitHub will not serve your content.  &lt;/li&gt;
&lt;li&gt;Run &lt;code&gt;git push origin gh-pages&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;That's all folks!&lt;/p&gt;</description><link>http://localhost:2368/publish-a-blog-on-github-with-ghost-and-buster/</link><guid isPermaLink="false">c854e40e-e0a2-4fb0-8902-d481220b9721</guid><category>ghost</category><category>blogging</category><dc:creator>Jake Gardner</dc:creator><pubDate>Sun, 29 Mar 2015 11:45:54 GMT</pubDate></item><item><title>Thinkful FEWD Resources</title><description>&lt;p&gt;Last Fall I decided to update my front-end skills by taking &lt;a href="https://www.thinkful.com/"&gt;Thinkful's&lt;/a&gt; Front-End Web Development course. I have been using HTML &amp;amp; CSS since the late 90's, but have not had a chance to use the latest versions in my current position (although I use Javascript almost daily).  I wanted to update my skills in short-order and also try out the online-course-with-tutor format which has become so popular. I find that having a structured curriculum with deadlines helps me learn faster so, enter Thinkful!&lt;/p&gt;

&lt;h3 id="thecourse"&gt;The Course&lt;/h3&gt;

&lt;p&gt;Overall I was very satisfied with the course. The task-specific projects help build skills one on top of another, and the community is very responsive and encouraging for newbies.&lt;/p&gt;

&lt;p&gt;One thing I noticed during the course was that only an introduction was given to some topics which are quite hefty on their own. In my case, I am always wondering, what more is there to know on this topic? Where can I find a deeper explanation? The tutors will fill in the blanks or point you to other resources if you ask, but I gathered my own additional resources to share!&lt;/p&gt;

&lt;h3 id="additionalfewdresources"&gt;Additional FEWD Resources&lt;/h3&gt;

&lt;h6 id="html"&gt;html&lt;/h6&gt;

&lt;p&gt;&lt;a href="http://html5forwebdesigners.com/"&gt;HTML5 for Web Designers&lt;/a&gt;
This title from A Book Apart gives a history of HTML, describes the features of HTML5, and discusses the all-important semantic use of markup. If you are wondering which is the correct tag to use for a particular element on your page, this is the book for you (read for free at link above).&lt;/p&gt;

&lt;h6 id="uiresponsivedesign"&gt;ui/responsive design&lt;/h6&gt;

&lt;p&gt;&lt;a href="http://www.amazon.com/Dont-Make-Me-Think-Usability/dp/0321344758"&gt;Don't Make Me Think&lt;/a&gt;
This is the classic guide on web usability design. The advice is sound even if a lot of the examples are dated.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.pluralsight.com/courses/responsive-web-design"&gt;Responsive Web Design&lt;/a&gt; This Pluralsight course from Ben Callahan is excellent. Ethan Marcotte's &lt;a href="http://abookapart.com/products/responsive-web-design"&gt;book&lt;/a&gt; by the same name is the frequent starting point in this topic for most people, but I felt Ben went further and gave more practical advice (e.g. navigation and tables). He shares anecdotes from his company's experiences and a bit on their process.&lt;/p&gt;

&lt;h6 id="css"&gt;css&lt;/h6&gt;

&lt;p&gt;&lt;a href="http://www.pluralsight.com/courses/css3-in-depth"&gt;CSS3 In-Depth&lt;/a&gt;
If you want to know about every property in the CSS3 spec with demos, Estelle Weyl's course has you covered. Especially with something as visual as CSS, reading the documentation doesn't always give you the answer you're looking for.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://sass-lang.com/guide"&gt;Sass&lt;/a&gt;
If you are a programmer writing CSS (like me), you probably wonder "how can I make this more modular/maintainable/readable/etc?". Enter Sass. Getting started with variables, imports, and nesting is pretty straightforward.&lt;/p&gt;

&lt;h6 id="javascript"&gt;javascript&lt;/h6&gt;

&lt;p&gt;&lt;a href="http://eloquentjavascript.net/"&gt;Eloquent Javascript&lt;/a&gt;
Probably the best introduction to Javascript. Covers all of the usual language features but also touches on modules, HTTP, and &lt;a href="https://nodejs.org/"&gt;Node.js&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.amazon.com/JavaScript-Patterns-Stoyan-Stefanov/dp/0596806752"&gt;Javascript Patterns&lt;/a&gt;
Usually when you see Patterns in a title you think of &lt;a href="http://en.wikipedia.org/wiki/Design_Patterns"&gt;Gang-of-Four Design Patterns&lt;/a&gt;. This book covers those as well, but perhaps more importantly discusses Javascript-specific best practices at the object and variable level and modular design for the browser. &lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.pluralsight.com/courses/build-process-workflows-tooling-gruntjs"&gt;Build Process, Workflows and Tooling With Grunt.js and Beyond&lt;/a&gt;
Another stellar course on Pluralsight from Dave Mosher. If you found yourself curious to dive more into the ecosystem of Javascript, this course will show you the ropes. Dave builds up a &lt;a href="http://gruntjs.com/"&gt;Grunt&lt;/a&gt; workflow step-by-step, covering everything from minification to testing to scaffolding tools &lt;a href="http://yeoman.io/"&gt;Yeoman&lt;/a&gt; &amp;amp; &lt;a href="http://linemanjs.com/"&gt;Lineman&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id="wrapup"&gt;Wrap-up&lt;/h3&gt;

&lt;p&gt;Front-end web development has become a massive set of technologies and skills to which you could (and people do!) dedicate your career. I felt these resources gave me a bit more depth and background to my foundation in this area as well as ignited an interest in UX and Design. Enjoy!&lt;/p&gt;</description><link>http://localhost:2368/thinkful-fewd-resources/</link><guid isPermaLink="false">0c484680-f711-4b66-9055-bce569943d0a</guid><category>resources</category><dc:creator>Jake Gardner</dc:creator><pubDate>Mon, 05 Jan 2015 04:24:32 GMT</pubDate></item></channel></rss>