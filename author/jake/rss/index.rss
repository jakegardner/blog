<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Jake Gardner - Jake Gardner</title><description>Explorations in development.</description><link>http://localhost:2368/</link><generator>Ghost 0.5</generator><lastBuildDate>Thu, 07 Jul 2016 00:57:24 GMT</lastBuildDate><atom:link href="http://localhost:2368/author/jake/rss/" rel="self" type="application/rss+xml"/><ttl>60</ttl><item><title>Redux: Thunk vs. Saga</title><description>&lt;p&gt;Two of the most common ways of dealing with side effects in Redux applications today are thunks and sagas.&lt;/p&gt;

&lt;h4 id="thunkyougotfunctionallinmyactions"&gt;Thunk: You Got Function All In My Actions&lt;/h4&gt;

&lt;p&gt;Most people will ask, what's a thunk? And why do I need it?&lt;/p&gt;

&lt;p&gt;The most straightforward explanation of a thunk I've seen is by Kyle Simpson (of You Don't Know JS fame) in his &lt;a href="https://frontendmasters.com/courses/rethinking-async-js/"&gt;Rethinking Asynchronous Javascript&lt;/a&gt; course for Front End Masters (highly recommended!).&lt;/p&gt;

&lt;p&gt;&lt;em&gt;A thunk is a function that already has everything it needs to execute.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;What does that have to do with redux thunk? I'm not sure either.&lt;/p&gt;

&lt;p&gt;As you know, in Redux, actions are defined by JSON. Redux-thunk allows you to send a function instead. Rather than [only] prescribe a state change for the reducer to carry out, you can write some logic to execute immediately and dispatch other actions. &lt;/p&gt;

&lt;p&gt;This is great for small use cases, however for more than a few functions, a better approach is &lt;a href="http://redux.js.org/docs/advanced/Middleware.html"&gt;middleware&lt;/a&gt; ... or sagas.&lt;/p&gt;

&lt;h6 id="howdoiusethisthing"&gt;How do I use this thing?&lt;/h6&gt;

&lt;p&gt;&lt;strong&gt;Add the redux-thunk middleware to the store.&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import { createStore, applyMiddleware, compose } from "redux";  
import thunkMiddleware from "redux-thunk";  
import rootReducer from "../reducers";

const createStoreWithMiddleware = compose(  
  applyMiddleware(thunkMiddleware)
)(createStore);

export default function configureStore(initialState) {  
  const store = createStoreWithMiddleware(rootReducer);
  return store;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;configureStore.js&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This file just exports a function that returns the store to be added to the Provider element.&lt;/p&gt;

&lt;p&gt;Using compose to create the createStoreWithMiddleware function is just a fancier way of writing  &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;const store = createStore(  
    rootReducer,
    applyMiddleware(thunkMiddleware)
);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Write an action that returns a function.&lt;/strong&gt; This function will take the dispatch method as a parameter. You can use this to call subsequent actions.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import * as types from "../constants/ActionTypes";

export function receiveBooks(data) {  
  return {
    type: types.RECEIVE_BOOKS,
    books: data.books,
    categories: data.categories,
    genres: data.genres
  };
}

export function fetchBooks() {  
  return dispatch =&amp;gt; {
    fetch("/books.json").then(response =&amp;gt; {
        const data = response.json();
        dispatch(receiveBooks(data));
    })
    .catch(error =&amp;gt; 
        dispatch({ type: types.FETCH_FAILED, error })
    );
  };
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;book-actions.js&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In this action creator file, we have one standard action, receiveBooks() and one thunk(ed) action, fetchBooks(). fetchBooks() just defines an arrow function taking dispatch as a parameter. The receiveBooks action is dispatched on success.&lt;/p&gt;

&lt;h4 id="sagaaheroictaleofdispatching"&gt;Saga: A Heroic Tale Of Dispatching&lt;/h4&gt;

&lt;p&gt;"Again with the names, what's a saga?!" If you are or were a fan of fantasy or science fiction, you already know. For the others, a saga is just a series of connected stories.&lt;/p&gt;

&lt;p&gt;For the case of &lt;a href="https://github.com/yelouafi/redux-saga"&gt;redux-saga&lt;/a&gt;, I'll let the README do the honor:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Sagas are responsible for orchestrating complex/asynchronous operations.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Sagas are created using Generator functions.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Since sagas take advantage of the yield keyword to halt execution within a function, they empower you to write the steps necessary to complete your action and let the Javascript engine manage the execution. &lt;/p&gt;

&lt;p&gt;Executing functions in series can otherwise be tricky, your other option being a promise chain.&lt;/p&gt;

&lt;h6 id="howdoiusethisthing"&gt;How do I use this thing?&lt;/h6&gt;

&lt;p&gt;&lt;strong&gt;Add redux-saga middleware to the store.&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import { createStore, applyMiddleware, compose } from "redux";  
import createSagaMiddleware from "redux-saga";  
import rootReducer from "../reducers";

const sagaMiddleware = createSagaMiddleware();

const createStoreWithMiddleware = compose(  
  applyMiddleware(sagaMiddleware)
)(createStore);

export default function configureStore(initialState) {  
  const store = createStoreWithMiddleware(rootReducer);
  return store;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;configureStore.js&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Define your saga.&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import { takeLatest } from "redux-saga"  
import { call, put } from "redux-saga/effects"

function* fetchBooks(path) {  
   try {
      const data = yield call(fetch, path);
      yield put({type: "RECEIVE_BOOKS", data });
   } catch (e) {
      yield put({type: "FETCH_FAILED", message: e.message});
   }
}

function* fetchSaga() {  
  yield* takeLatest("FETCH_BOOKS", fetchBooks);
}

export default fetchSaga;  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;sagas/index.js&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;fetchSaga() listens for all FETCH_BOOKS actions and calls fetchBooks() once received. takeLatest() just means that if there are multiple actions fired, the most recent will be run and previous ones will be cancelled.&lt;/p&gt;

&lt;p&gt;What's the benefit of using a saga here?&lt;/p&gt;

&lt;p&gt;Since fetchBooks() as a saga is a Generator function, the call to the fetch api with the yield keyword will block until the promise is resolved. Also, since it is blocking, we can make use of try/catch for error handling.&lt;/p&gt;

&lt;p&gt;Another benefit is testing. The call and put methods return javascript objects, so in unit tests you can simply test each value yielded by your saga function with equality comparison. Testing thunks often requires complex mocking of the fetch api or other functions.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Import and run saga.&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import { createStore, applyMiddleware, compose } from "redux";  
import createSagaMiddleware from "redux-saga";  
import rootReducer from "../reducers";  
import fetchSaga from "../sagas";

const sagaMiddleware = createSagaMiddleware();

const createStoreWithMiddleware = compose(  
  applyMiddleware(sagaMiddleware)
)(createStore);

export default function configureStore(initialState) {  
  const store = createStoreWithMiddleware(rootReducer);
  sagaMiddleware.run(fetchSaga);
  return store;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;configureStore.js&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Since we already added the saga middleware to the store, the only thing that remains is to import and run the saga we defined.&lt;/p&gt;</description><link>http://localhost:2368/redux-thunk-vs-saga/</link><guid isPermaLink="false">f527e9a6-e071-40e5-81a3-1bacc8433f28</guid><category>redux</category><dc:creator>Jake Gardner</dc:creator><pubDate>Thu, 07 Jul 2016 00:49:43 GMT</pubDate></item><item><title>May Picks - Seven Databases, Seven Concurrency Models</title><description>&lt;p&gt;These books had been on my list for a while, I finally found an appropriate time to dive in. &lt;/p&gt;

&lt;h4 id="sevendatabasesinsevenweeks"&gt;Seven Databases In Seven Weeks&lt;/h4&gt;

&lt;p&gt;&lt;img src="http://localhost:2368/content/images/2016/06/sevendatabases.jpg" alt=""&gt;&lt;/p&gt;

&lt;p&gt;I've had experience with three of the databases in this book, Postgres, Redis, and Mongo. The others featured in this book, Riak, CouchDB, HBase, Neo4j are not as popular in the wild but still good to have in your toolbelt.&lt;/p&gt;

&lt;p&gt;I was most intrigued by Riak with its simple configuration of clusters and read/write consistency, and on a per-bucket basis. It also supports mapreduce. &lt;/p&gt;

&lt;p&gt;HBase I have seen around the web, but did not know that it powers core services at Facebook, Twitter, eBay, and others. This is the database for Big Data problems.&lt;/p&gt;

&lt;h4 id="sevenconcurrencymodelsinsevenweeks"&gt;Seven Concurrency Models In Seven Weeks&lt;/h4&gt;

&lt;p&gt;&lt;img src="http://localhost:2368/content/images/2016/06/seven-concurrency-models-in-seven-weeks-when-threads-unravel.jpg" alt=""&gt;&lt;/p&gt;

&lt;p&gt;A lot of the excitement around functional programming today is because it simplifies concurrency. This book explains how that's so, as well as the models of Go and Erlang. &lt;/p&gt;

&lt;p&gt;This is an essential text for all engineers. From the humble beginnings of concurrency (threads/locks), to functional programming, to better approaches (CSP), and the currently largest-scale concurrency model (MapReduce). Java, Clojure, and Elixir are used in the examples.&lt;/p&gt;</description><link>http://localhost:2368/may-picks-seven-databases-seven-concurrency-models/</link><guid isPermaLink="false">48181774-6ae1-460f-a06e-2214fa18a9ca</guid><dc:creator>Jake Gardner</dc:creator><pubDate>Thu, 09 Jun 2016 12:04:04 GMT</pubDate></item><item><title>Functional Fundamentals: Currying &amp; Partial Application</title><description>&lt;p&gt;This is part four in my series on functional programming fundamentals in Javascript. You can find the previous articles here: &lt;a href="http://localhost:2368/functional-fundamentals-pure-function"&gt;part one&lt;/a&gt;, &lt;a href="http://localhost:2368/functional-fundamentals-higher-order-functions/"&gt;part two&lt;/a&gt;, &lt;a href="http://localhost:2368/functional-fundamentals-compose/"&gt;part three&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Functional programming is full of non-obvious terminology, e.g. currying, but this is an important one to know. Currying is similar to but different from partial application, so we will compare these two today.&lt;/p&gt;

&lt;h4 id="currying"&gt;Currying&lt;/h4&gt;

&lt;p&gt;Currying is converting a function that takes many arguments into a function that takes a single argument, and returns a function accepting yet another single argument. This facilitates creating a chain of function calls in place of a single call with many arguments.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function sum(a, b) {  
    return a + b;
}
var addThese = sum.curry();  
addThese(2); // function waiting for b  
addThese(4); // 6  
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id="partialapplication"&gt;Partial Application&lt;/h4&gt;

&lt;p&gt;Partial application is supplying some arguments to a function and receiving a function back that can accept additional arguments.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function sum(a, b) {  
    return a + b;
}
var addThese = sum.partialApply(3);  
addThese(); // 3  
addThese(5, 7); // 15  
addThese(9); // 24  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The key distinction between currying and partial application is that partially-applied functions always return a value, whereas curried functions return a function until the expected number of arguments have been received. &lt;/p&gt;</description><link>http://localhost:2368/functional-fundamentals-currying-partial-application/</link><guid isPermaLink="false">c769c60f-aa10-46db-a979-92e4a7fcd51e</guid><dc:creator>Jake Gardner</dc:creator><pubDate>Fri, 03 Jun 2016 11:36:55 GMT</pubDate></item><item><title>Functional Fundamentals: Compose</title><description>&lt;p&gt;This is part three in a series on functional programming concepts. Here are parts &lt;a href="http://localhost:2368/functional-fundamentals-pure-function/"&gt;one&lt;/a&gt; and &lt;a href="http://localhost:2368/functional-fundamentals-higher-order-functions/"&gt;two&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Last time we looked at building up a chain of operations with higher-order functions. While this method works, it quickly becomes verbose. There is a better way!&lt;/p&gt;

&lt;p&gt;Compose is an often used function in functional programming. It allows you to chain functions together that accept a single argument and return the type that the next function is expecting.&lt;/p&gt;

&lt;p&gt;Going with our example from part two:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function discount(x) {  
    return 0.8 * x;
}

function half(x) {  
    return x / 2;
}

var discountHalfPrice = compose(discount, half);  
discountHalfPrice(10); // 4  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What is compose doing under the hood? It accepts two functions as parameters and returns a function that accepts an argument. When this returned function is called, the argument is passed to the right function, the result of that then passed to the left function. With compose, it's key to remember that functions are processed right to left.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function compose(f, g) {  
    return function(x) {
         return f(g(x));   
    };
}
&lt;/code&gt;&lt;/pre&gt;</description><link>http://localhost:2368/functional-fundamentals-compose/</link><guid isPermaLink="false">6b01ca47-298a-4ded-8093-2fe26dc3ec3d</guid><dc:creator>Jake Gardner</dc:creator><pubDate>Sat, 14 May 2016 21:56:08 GMT</pubDate></item><item><title>Functional Fundamentals: Higher Order Functions</title><description>&lt;p&gt;This is part two in my series on functional programming concepts. Last time, we learned about &lt;a href="http://localhost:2368/functional-fundamentals-pure-function/"&gt;pure functions&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This time, we are going to learn about higher order functions. This is &lt;em&gt;the&lt;/em&gt; feature that makes functional programming possible.&lt;/p&gt;

&lt;p&gt;You know what a function is. But, what does &lt;em&gt;higher order&lt;/em&gt; mean?&lt;/p&gt;

&lt;h4 id="functioninafunction"&gt;Function In A Function&lt;/h4&gt;

&lt;p&gt;A higher order function is one that takes a function as a parameter, and returns a new function as a result.&lt;/p&gt;

&lt;p&gt;Here is an example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function getPrice() {  
    return 10;
}

function half(func) {  
    return function() {
        return func() / 2;
    };
}

var halfPrice = half(getPrice);  
halfPrice(); // 5  
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id="sowhat"&gt;So What?&lt;/h4&gt;

&lt;p&gt;Higher order functions allow us to feed one function into another many times over, building up a chain of operations to which can be triggered with a single function call.&lt;/p&gt;

&lt;p&gt;Take a moment to appreciate the power of this.&lt;/p&gt;

&lt;p&gt;Now you are able to construct things like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function getPrice() {  
    return 10;
}

function half(func) {  
    return function() {
        return func() / 2;
    };
}

var halfPrice = half(getPrice);  
halfPrice(); // 5

function discount(func) {  
    return function() {
        return 0.80 * func();
    };
}

var discountHalfPrice = discount(halfPrice);  
discountHalfPrice(); // 4  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ofcourse this is a contrived example, but the idea is that you can perform a series a small operations using a single function call. Eventually, this could trigger your entire program.&lt;/p&gt;

&lt;p&gt;Next, we will look at how we can extend this idea to combining multiple functions at the same time - with compose.&lt;/p&gt;</description><link>http://localhost:2368/functional-fundamentals-higher-order-functions/</link><guid isPermaLink="false">2c20688a-5210-409e-a87f-aed98699105c</guid><dc:creator>Jake Gardner</dc:creator><pubDate>Thu, 05 May 2016 16:10:16 GMT</pubDate></item><item><title>April Picks - FP, Asynchrony</title><description>&lt;h4 id="functionalprogramminginjavascript"&gt;Functional Programming in Javascript&lt;/h4&gt;

&lt;p&gt;&lt;img src="http://localhost:2368/content/images/2016/05/fpjs.jpeg" alt=""&gt;
Lately, I have been trying to dedicate some time to get more into functional programming. Since I have a background in Java, I first started with Scala but ultimately found the resources I could find a bit too academic. &lt;/p&gt;

&lt;p&gt;I thought this book by Dan Mantyla was easy to understand yet still explained quite a lot. It gently increases from map/filter/reduce to showing how Currying &amp;amp; compose work to Category Theory. The last chapter is dedicated to showing how to mix Javascript's two paradigms, object-oriented and functional, to write applications. &lt;/p&gt;

&lt;p&gt;So I think this an ideal starting point for an FP beginner, especially coming from the Javascript perspective.&lt;/p&gt;

&lt;p&gt;A good follow-up from this could be the &lt;a href="https://drboolean.gitbooks.io/mostly-adequate-guide/content/"&gt;mostly adequate guide&lt;/a&gt; by Brian Lansdorf.&lt;/p&gt;

&lt;h4 id="rethinkingasynchronousjavascript"&gt;Rethinking Asynchronous Javascript&lt;/h4&gt;

&lt;p&gt;There is probably no more in-depth resource on this topic than &lt;a href="https://frontendmasters.com/courses/rethinking-async-js/"&gt;this course&lt;/a&gt; by Kyle Simpson for Front-End Masters.&lt;/p&gt;

&lt;p&gt;Kyle demonstrates all of the available asynchrony models in Javascript, from Promises, to Generators, to Observables, to CSP. This would be an excellent guide if you're just getting into dealing with asynchrony in Javascript or you've been away and want to see what's changed.&lt;/p&gt;

&lt;p&gt;I know for me, Generators are not something I've really thought a lot about, and Kyle showed how they can be used effectively for flow control.&lt;/p&gt;</description><link>http://localhost:2368/april-picks/</link><guid isPermaLink="false">e539110b-5add-4b9e-82ec-3a32e7d24f26</guid><category>picks</category><dc:creator>Jake Gardner</dc:creator><pubDate>Mon, 02 May 2016 15:44:30 GMT</pubDate></item><item><title>Functional Fundamentals: Pure Function</title><description>&lt;p&gt;This is the first part of a series covering some topics from functional programming. &lt;/p&gt;

&lt;p&gt;What's functional programming? You can read entire books to answer that question, but I will just say that it is a programming paradigm in which a program is constructed with a series of simple, &lt;em&gt;pure&lt;/em&gt; functions.&lt;/p&gt;

&lt;p&gt;This is contrasted with the imperative paradigm, in which you probably learn to program, where you write a series of instructions and conditional branches.&lt;/p&gt;

&lt;p&gt;Whether you learn functional programming or not is another question, but you will see many of these concepts around the web (and in more and more frameworks) so you should understand what they mean.&lt;/p&gt;

&lt;h4 id="whatsapurefunction"&gt;What's a pure function?&lt;/h4&gt;

&lt;p&gt;A pure function is a function that does not modify any part of your program other than its parameters. &lt;/p&gt;

&lt;p&gt;For example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function createThing(name) {  
    var thing = {};
    thing.name = name;
    return thing;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This function makes use of its parameter, but does not touch anything outside the function itself.&lt;/p&gt;

&lt;p&gt;Contrast this with an impure version of this function:  &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var myThings = [];  
...
function createThing(name) {  
    var thing = {};
    thing.name = name;
    myThings.push(thing);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Even though this is valid code, the function is changing something beyond its responsibility. This is called a &lt;em&gt;side-effect&lt;/em&gt;.&lt;/p&gt;

&lt;h4 id="sowhat"&gt;So what?&lt;/h4&gt;

&lt;p&gt;Even if you have no desire to become a functional programmer, writing as many of your functions as possible in a pure way only has benefits for you and others that may read/use your code.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Pure functions make your code easier to understand.&lt;/strong&gt; If you write your functions in a pure way, then when another programmer or a much later you reads the code, they will be able to easily predict what will happen in the program just by reading the function names. If there are side effects within your functions, it may be difficult to debug, refactor or understand the order in which things are happening.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Pure functions are easier to test.&lt;/strong&gt; Including references to objects outside your functions makes them difficult to test because those objects may not be accessible in a test scenario. This is where mocking comes in. However, depending on what you need to mock, this can be quite complicated. Make it easy on yourself to write those unit tests.&lt;/p&gt;</description><link>http://localhost:2368/functional-fundamentals-pure-function/</link><guid isPermaLink="false">a860cc67-a6ef-4ca5-a4a9-092023ce5278</guid><dc:creator>Jake Gardner</dc:creator><pubDate>Tue, 26 Apr 2016 16:52:30 GMT</pubDate></item><item><title>Extract Fetch calls with Redux Middleware</title><description>&lt;p&gt;The first thing a lot of people coming to the React side-of-things ask is, "what about async actions?" (I did too). &lt;br&gt;
Since React is unopinionated on this point, you can do it however you like. &lt;/p&gt;

&lt;p&gt;However, since I use Redux for any substantial application I develop with React, I wanted to find a good pattern to use to handle asynchronous behavior that takes advantage of the plumbing available.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;I specifically use &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API"&gt;Web API Fetch&lt;/a&gt; in this article, but any HTTP request library could be substituted.&lt;/em&gt;&lt;/p&gt;

&lt;h4 id="asyncactioncreators"&gt;Async Action Creators&lt;/h4&gt;

&lt;p&gt;A pattern offered in the Redux documentation is to have some action creators perform these asynchronous actions for you. I initially used this pattern.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;A pre-requisite here is to include the &lt;a href="https://github.com/gaearon/redux-thunk"&gt;redux-thunk&lt;/a&gt; middleware. All this does is allow you to dispatch a function in addition to plain objects. See &lt;a href="https://github.com/gaearon/redux-thunk"&gt;this&lt;/a&gt; for more details.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Your asynchronous action creator will be something like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;export function fetchData(itemId) {  
    return dispatch =&amp;gt; {
        fetch(`${API}/items/${itemId}`, {
            method: "GET",
            headers: new Headers({
                "Authorization": `Bearer ${TOKEN}`
            })
        })
        .then( response =&amp;gt; response.json() )
        .then( json =&amp;gt; dispatch(fetchDataSuccess(json)) )
        .catch( error =&amp;gt; dispatch(fetchDataFailure(error)) );
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So in contrast to standard synchronous action creators which return a plain object, you return a function which takes dispatch as a parameter. Inside this function you perform your asynchronous behavior and potentially dispatch another function on completion.&lt;/p&gt;

&lt;p&gt;With any substantial application, the number of these kinds of actions can grow wildly. Furthermore, they can be quite verbose depending on what parameters we need to pass to Fetch. Being diligent programmers that we are, we recognize this is an opportunity to eliminate redundancy by extracting these Fetch calls elsewhere.&lt;/p&gt;

&lt;p&gt;You could easily create a module an just require it in every action file, but that approach also has some degree of repetition. Fortunately, Redux's middleware mechanism is designed for just this type of situation.&lt;/p&gt;

&lt;h4 id="fetchmiddleware"&gt;Fetch Middleware&lt;/h4&gt;

&lt;p&gt;Let's create a middleware that performs the Fetch if a Fetch parameter object exists in the action. We can define the properties of this object however we like. I have just included the most common Fetch parameters as well as success and failure handlers.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;const fetchMiddleware = store =&amp;gt; next =&amp;gt; action =&amp;gt; {  
    if (!action || !action.fetchConfig) {
        return next(action)
    }

    let dispatch = store.dispatch
    let config = action.fetchConfig
    dispatch(config.init)

    const path = config.path || "/"
    const method = config.method || "GET"
    const headers = config.headers
    const body = config.body
    const successHandler = config.success
    const failureHandler = config.failure

    fetch(path, {
        method: method,
        headers: headers,
        body: JSON.stringify(body)
    })
    .then( response =&amp;gt; response.json() )
    .then( json =&amp;gt; successHandler(json) )
    .catch( error =&amp;gt; failureHandler(error) )

}

export default fetchMiddleware  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A middleware is defined as a function that takes the store as a parameter, returns a function which takes the next middleware as parameter, which in turn returns a function that takes an action to run. (mind bent yet?)&lt;/p&gt;

&lt;p&gt;For a detailed walkthrough of how middleware works and a number of other use cases, see the excellent write-up  &lt;a href="http://redux.js.org/docs/advanced/Middleware.html"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So we just check for the existence of fetchConfig on the action and proceed if so. If not, then we hand off to the next middleware.&lt;/p&gt;

&lt;p&gt;Our function just takes apart the config object and sets any defaults as necessary. Then, execute the Fetch call and any handlers for Promise resolution.&lt;/p&gt;

&lt;p&gt;If your success/failure handler is another action, you can just change the then/catch block to:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    .then( json =&amp;gt; {
        dispatch(successHandler(json))
    })
    .catch( error =&amp;gt; dispatch(failureHandler(error)) )
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, we can include our middleware in the createStore method to ensure it's called as part of the action flow.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;let app = combineReducers(reducers)  
let store = createStore(  
  app,
  applyMiddleware(thunk, fetchMiddleware)
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Lastly, we just update the action creator to pass the fetchConfig object.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;export function fetchData(itemId) {  
    return {
        type: "FETCH_ITEM",
        fetchConfig: {
            path: `${API}/items/${itemId}`,
            method: "GET",
            headers: {
                "Authorization": `Bearer ${TOKEN}`
            }
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;</description><link>http://localhost:2368/consolidate-fetch-with-redux-middleware/</link><guid isPermaLink="false">3a909a86-bad6-4185-98bc-7ad281fa4b6f</guid><category>redux</category><dc:creator>Jake Gardner</dc:creator><pubDate>Mon, 11 Apr 2016 23:06:02 GMT</pubDate></item><item><title>February Picks - Ruby, OOD</title><description>&lt;p&gt;In February, I was focused on Ruby. While familiar with the basics of Ruby and Rails, I wanted to dive deeper and discover any details that might be useful in projects I currently have in mind. Let's get into it!&lt;/p&gt;

&lt;h4 id="thewellgroundedrubyist"&gt;The Well-Grounded Rubyist&lt;/h4&gt;

&lt;p&gt;&lt;img src="http://localhost:2368/content/images/2016/03/wellgroundedrubyist.jpeg" alt=""&gt;
This book provides a comprehensive overview of the Ruby language, introducing a bit about The Ruby Way and features that are unique to the language.&lt;/p&gt;

&lt;p&gt;As an experienced user of other programming languages, I find Ruby easy to read and understand but there are a few features that are not obvious to the uninitiated. The Well-Grounded Rubyist shed light on those areas. Particularly relevant for me was discussion on when to use modules vs classes, and the logic behind Symbols. &lt;/p&gt;

&lt;p&gt;This book is a great step-up for the beginning Rubyist and likely a worthy reference for the more experienced.&lt;/p&gt;

&lt;h4 id="practicalobjectorienteddesigninruby"&gt;Practical Object-Oriented Design in Ruby&lt;/h4&gt;

&lt;p&gt;&lt;img src="http://localhost:2368/content/images/2016/03/practicaloodruby.jpg" alt=""&gt;
I was quite surprised to discover that this book not only shows object-oriented design techniques using Ruby, but is actually the most succinct and clear description of general OOD that I have read. I would recommend this book if you do any OOD, even if it's not in Ruby.&lt;/p&gt;

&lt;p&gt;Sandi Metz first introduces object-oriented principles and general coding best-practices, then takes simple examples through multiple evolutions of design and refactoring to broaden how you think of object-oriented design and expose flaws in common approaches.&lt;/p&gt;

&lt;p&gt;The key takeaway for me was to think of design in terms of messages rather than objects. If you only think of concrete entities when coming up with objects, you will miss some important objects and introduce unnecessary coupling. When you discover this later on, refactoring is painful and expensive. I have experienced this first-hand.&lt;/p&gt;</description><link>http://localhost:2368/february-reading/</link><guid isPermaLink="false">8249b9d6-d034-472a-8d32-3137f1354bda</guid><category>ruby</category><category>picks</category><dc:creator>Jake Gardner</dc:creator><pubDate>Thu, 03 Mar 2016 07:19:36 GMT</pubDate></item><item><title>Routing with Redux</title><description>&lt;p&gt;Last weekend I put together my first Redux &lt;a href="https://github.com/jakegardner/redux-bookcatalog"&gt;application&lt;/a&gt; by refactoring an old demo. Once you get familiar, the architecture seems like a very natural way to build applications.&lt;/p&gt;

&lt;p&gt;One area that took some time to figure out was that of routing. While you can use &lt;a href="https://github.com/rackt/react-router"&gt;react-router&lt;/a&gt;, you need to do some extra wiring to get your state flowing as you would expect with vanilla React. &lt;/p&gt;

&lt;p&gt;There are two projects to provide a seamless integration with Redux architecture, &lt;a href="https://github.com/acdlite/redux-router"&gt;redux-router&lt;/a&gt; and &lt;a href="https://github.com/rackt/redux-simple-router"&gt;redux-simple-router&lt;/a&gt;. Redux-router, at time of writing, is considered experimental, so I went with the redux-simple-router. It integrates seamlessly with react-router and redux.&lt;/p&gt;

&lt;p&gt;I flet that some details were missing from documentation of integrating these projects, so I'm writing this simple how-to in the hopes that it helps someone else in the same situation in the future :)&lt;/p&gt;

&lt;h4 id="background"&gt;Background&lt;/h4&gt;

&lt;p&gt;Here I will provide some information on the components you need to get this working, namely react-router and redux-simple-router.&lt;/p&gt;

&lt;h6 id="reactrouter"&gt;React-router&lt;/h6&gt;

&lt;p&gt;The key rendered component of &lt;a href="https://github.com/rackt/react-router"&gt;react-router&lt;/a&gt; is the Router:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;Router /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Inside your Router element, you will put one or more Route elements: &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;Router&amp;gt;
    &amp;lt;Route path="/" component={App} /&amp;gt;
&amp;lt;/Router&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Each Route element can also have child routes:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;Router&amp;gt;
    &amp;lt;Route path="/" component={App}&amp;gt;
            &amp;lt;Route path="home" component={Home} /&amp;gt;
    &amp;lt;/Route&amp;gt;
&amp;lt;/Router&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you might expect, each Route element defines the expected route and the component should be rendered when hitting that route.&lt;/p&gt;

&lt;p&gt;Where do the routes get rendered?&lt;/p&gt;

&lt;p&gt;In the render method of a component with child routes (e.g. App in the above example), you will add something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;div&amp;gt;
    {this.props.children}
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;{this.props.children}&lt;/code&gt; identifies where in the render method child routes should be rendered. So for the /home route, the Home component would replace the contents of this div. &lt;/p&gt;

&lt;h6 id="reduxsimplerouter"&gt;Redux-simple-router&lt;/h6&gt;

&lt;p&gt;Redux-simple-router simply (ha!) stores your router state in your Redux store. So, whereever you have connected a React component to your store, you can access routing parameters, path etc as a property of state i.e. &lt;code&gt;state.router&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This is enabled by this statement:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;syncReduxAndRouter(history, store, (state) =&amp;gt; state.router);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This should be included where you create your store. Don't worry; there is an example coming.&lt;/p&gt;

&lt;h4 id="letsmakethishappen"&gt;Let's make this happen&lt;/h4&gt;

&lt;p&gt;Now that we have some fundamental understanding, let's apply it.&lt;/p&gt;

&lt;h6 id="installreactrouterreduxsimplerouter"&gt;Install react-router, redux-simple-router&lt;/h6&gt;

&lt;p&gt;If you haven't already, run these:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm install --save react-router
npm install --save redux-simple-router
&lt;/code&gt;&lt;/pre&gt;

&lt;h6 id="setupreduxsimplerouter"&gt;Setup redux-simple-router&lt;/h6&gt;

&lt;p&gt;The following should be in your application entry point file (I call mine index.js).&lt;/p&gt;

&lt;p&gt;This is where the store is created, and the syncReduxAndRouter function is called.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import React, { Component, PropTypes } from "react";
import { render } from "react-dom";
import { createHistory, useBasename } from "history";
import { syncReduxAndRouter } from "redux-simple-router";
import routes from "./routes";
import Root from "./containers/Root";
import configureStore from "./store/configureStore";

const history = useBasename(createHistory)({
  basename: JSON.stringify(process.env.BASENAME || "/")
});
const store = configureStore();

syncReduxAndRouter(history, store, (state) =&amp;gt; state.router);

render(
  &amp;lt;Root history={history} routes={routes} store={store} /&amp;gt;,
  document.getElementById("root")
);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After syncing redux and the router, the routes and store are passed as props to the Root container (component).&lt;/p&gt;

&lt;p&gt;The store parameter is the &lt;a href="http://rackt.org/redux/docs/api/Store.html"&gt;Redux store&lt;/a&gt; returned by createStore(). The history parameter is created by createHistory(). The routes parameter are the routes defined as &lt;a href="https://facebook.github.io/jsx/"&gt;JSX&lt;/a&gt; in another file (see below). These can also be specified inline.&lt;/p&gt;

&lt;h6 id="addrouterelement"&gt;Add Router element&lt;/h6&gt;

&lt;p&gt;In the Root component file, and inside of your &lt;a href="http://localhost:2368/"&gt;Provider&lt;/a&gt; element, add the Router element:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;Provider store={this.props.store}&amp;gt;
    &amp;lt;Router history={this.props.history}&amp;gt;
      {this.props.routes}
    &amp;lt;/Router&amp;gt;
&amp;lt;/Provider&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The props in this snippet are the same that we defined and passed in the previous code sample.&lt;/p&gt;

&lt;p&gt;So the full Root component source should look like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  import React, { Component, PropTypes } from "react";
  import { Provider } from "react-redux";
  import { Router } from "react-router";

  class Root extends Component {
    render() {
      return (
        &amp;lt;Provider store={this.props.store}&amp;gt;
          &amp;lt;Router history={this.props.history}&amp;gt;
            {this.props.routes}
          &amp;lt;/Router&amp;gt;
        &amp;lt;/Provider&amp;gt;
      );
    }
  }
  Root.propTypes = {
    history: PropTypes.object.isRequired,
    routes: PropTypes.element.isRequired,
    store: PropTypes.object.isRequired
  };

export default Root;
&lt;/code&gt;&lt;/pre&gt;

&lt;h6 id="configureroutes"&gt;Configure routes&lt;/h6&gt;

&lt;p&gt;Now to define the routes. Add a top-level route and any needed sub-routes: &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;Route path="/" component={App}&amp;gt;
    &amp;lt;IndexRoute component={Home} /&amp;gt;
    &amp;lt;Route path="/book/:bookId" component={Detail} /&amp;gt;
&amp;lt;/Route&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The parent &lt;a href="https://github.com/rackt/react-router/blob/latest/docs/guides/basics/RouteConfiguration.md"&gt;Route&lt;/a&gt; element with the root path encloses any other routes in your application.&lt;/p&gt;

&lt;p&gt;The &lt;a href="https://github.com/rackt/react-router/blob/latest/docs/guides/basics/IndexRoutes.md"&gt;IndexRoute&lt;/a&gt; is a special element that allows you to specify which component should receive the request with no additional route information, i.e. the root path. Even though this element specifies the destination, I found that the path and component properties in the parent Route element were required.&lt;/p&gt;

&lt;p&gt;Finally, the child Route element specifies a sub-route of the root with a route parameter indicated by the leading colon. This parameter will be available as &lt;code&gt;state.router.params.bookId&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The full routes source file should look like: &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import React, { Component, PropTypes } from "react";
import { Route, IndexRoute } from "react-router";
import App from "../components/App";
import Home from "../components/Home";
import Detail from "../components/Detail";

export default (
      &amp;lt;Route path="/" component={App}&amp;gt;
        &amp;lt;IndexRoute component={Home} /&amp;gt;
        &amp;lt;Route path="/book/:bookId" component={Detail} /&amp;gt;
      &amp;lt;/Route&amp;gt;
);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Save this as &lt;code&gt;/routes/index.js&lt;/code&gt; or wherever is appropriate, but make sure to update the include path in the Root component file.&lt;/p&gt;

&lt;h6 id="modifystateparameterincomponents"&gt;Modify state parameter in components&lt;/h6&gt;

&lt;p&gt;The final step is to check any components that receive state. Before the routing configuration, your state object may have had the properties you defined at the root of the object. Afterwards, I found that the state object now includes a child object for the router and one for the reducer. Whatever state is returned by the &lt;a href="http://rackt.org/redux/docs/basics/Reducers.html"&gt;reducer&lt;/a&gt; is a child of this child reducer object, like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;state = {
    router: {
        changeId: 1,
        path: "/book/12",
        replace: false,
        state: ...
    },
    reducer: {
        *state here*
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The reducer will be named after your reducer. Update your props declarations or mapStateToProps methods as appropriate to ensure that &lt;a href="http://rackt.org/redux/docs/basics/DataFlow.html"&gt;state flows&lt;/a&gt; to your components as you expect.&lt;/p&gt;</description><link>http://localhost:2368/routing-with-redux/</link><guid isPermaLink="false">0213fc9b-798c-4a10-a5e2-93ef5e7b4d8f</guid><category>react</category><category>redux</category><dc:creator>Jake Gardner</dc:creator><pubDate>Tue, 12 Jan 2016 05:22:30 GMT</pubDate></item><item><title>Testing CLI Tools</title><description>&lt;p&gt;While I was developing the &lt;a href="https://www.npmjs.com/package/s3syncr"&gt;s3syncr&lt;/a&gt; command-line (CLI) utility, I discovered I needed a way to test the function of the program as a whole. There are separate tests for the parsing of input to the program, but I wanted to verify the interaction of all the components as well as the output. &lt;/p&gt;

&lt;p&gt;Since console output is the only interface given to the user in a CLI tool, consistent output is critical.&lt;/p&gt;

&lt;p&gt;So, I made use of Node to run the utility inside a Mocha test.&lt;/p&gt;

&lt;h4 id="nodeexec"&gt;Node exec()&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;describe("No parameters", function() {
    it("should output No operation", function(done) {
        require('child_process').exec("node index.js",  
            function(err, stdout, stderr) {
              assert(err);
              assert.strictEqual(stderr, "No operation\n");
              done();  
        });
    });
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This test uses the Node-native &lt;a href="https://nodejs.org/api/child_process.html#child_process_child_process_exec_command_options_callback"&gt;child_process.exec&lt;/a&gt; method which runs a shell command and gives you access to what is written to console.log() and console.error() through the &lt;code&gt;stdout&lt;/code&gt; and &lt;code&gt;stderr&lt;/code&gt; parameters, respectively. You can also pass in an options object to specify current working directory, environment variables and so on.&lt;/p&gt;

&lt;h4 id="assertingoutput"&gt;Asserting Output&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;assert.strictEqual(stderr, "No operation\n");
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now that console output is available, to execute tests you just need to assert on &lt;code&gt;stdout&lt;/code&gt; or &lt;code&gt;stderr&lt;/code&gt; string content. &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;assert(err);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can also use the &lt;code&gt;err&lt;/code&gt; parameter to check for uncaught exceptions.&lt;/p&gt;

&lt;h4 id="automatinginput"&gt;Automating Input&lt;/h4&gt;

&lt;p&gt;Using exec() in the before and after &lt;a href="https://mochajs.org/#hooks"&gt;test hooks&lt;/a&gt; to handle varying test input gives you a path towards comprehensive automated testing!&lt;/p&gt;

&lt;p&gt;For example, you can have some tests that create a file, run the test, and then remove the file afterwards.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;beforeEach(function(done) {
    require('child_process').exec("echo 'test' &amp;gt; test.txt", 
        function(err, stdout, stderr) {
            done();
    });
});

afterEach(function(done) {
    require('child_process').exec("rm test.txt", 
        function(err, stdout, stderr) {
            done();
    });
});

it("should output something", function(done) {
    ...
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id="wrapup"&gt;Wrap Up&lt;/h4&gt;

&lt;p&gt;If you write any kind of CLI, this is a simple way to verify output.&lt;/p&gt;

&lt;p&gt;Honestly, this kind of test could be done in any scripting language, but using Node and Mocha allowed me to integrate with the rest of the testing suite.&lt;/p&gt;</description><link>http://localhost:2368/testing-cli-tools/</link><guid isPermaLink="false">c1447f66-a81e-4c93-b108-e6489972050b</guid><category>node</category><category>testing</category><dc:creator>Jake Gardner</dc:creator><pubDate>Tue, 15 Dec 2015 13:17:10 GMT</pubDate></item><item><title>Publish your Angular app to Heroku</title><description>&lt;p&gt;&lt;a href="https://www.heroku.com/"&gt;Heroku&lt;/a&gt; is great for hosting your development projects (particularly in-progress). In fact, I recommend publishing your project sooner rather than later so that you don't have any surprises in deployment later on. &lt;/p&gt;

&lt;p&gt;Getting Heroku to serve your Angular application is pretty simple but does require a little bit of configuration. Moreover, these same steps could work for any front-end project, not just Angular.&lt;/p&gt;

&lt;p&gt;This article assumes: &lt;br&gt;
You have a Heroku account &lt;br&gt;
You have the &lt;a href="https://toolbelt.heroku.com/"&gt;Heroku Toolbelt&lt;/a&gt; installed on your machine&lt;/p&gt;

&lt;h4 id="addexpress"&gt;Add Express&lt;/h4&gt;

&lt;p&gt;Firstly, you'll want to &lt;code&gt;npm install --save express gzippo&lt;/code&gt; in your project directory.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.npmjs.com/package/express"&gt;Express&lt;/a&gt; is a node-based web server which Heroku will use to serve your application files.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.npmjs.com/package/gzippo"&gt;Gzippo&lt;/a&gt; allows you to compress (gzip) the files before they are sent on the wire to reduce the size, improving performance.&lt;/p&gt;

&lt;h4 id="createanexpressserverfile"&gt;Create an Express server file&lt;/h4&gt;

&lt;p&gt;Create a file named &lt;code&gt;web.js&lt;/code&gt; in your project root. In this file, add the following lines:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var gzippo = require('gzippo');
var express = require('express');
var morgan = require('morgan');
var app = express();

app.use(morgan('dev'));
app.use(gzippo.staticGzip("" + __dirname + "/dist"));

app.route('/*').get( function(req, res) {
    return res.sendFile(__dirname + "/dist/index.html");
});

app.listen(process.env.PORT || 5000);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This file includes necessary dependencies, and configures Express to respond to all requests with the file at the path in the res.sendFile method. You will need to update this path according to where your final application bundle resides.&lt;/p&gt;

&lt;h4 id="addprocfileandupdatepackagejson"&gt;Add Procfile and Update package.json&lt;/h4&gt;

&lt;p&gt;Heroku relies on a file called &lt;code&gt;Procfile&lt;/code&gt; to know how to start your application. Note that &lt;a href="https://devcenter.heroku.com/articles/procfile"&gt;Procfile&lt;/a&gt; has no file extension. &lt;br&gt;
To this file, you just need to add &lt;code&gt;web: node web.js&lt;/code&gt;. Web lets Heroku know that you want to serve HTTP content, and the remainder is command to invoke node with the Express file you created in the previous step.&lt;/p&gt;

&lt;h4 id="pushtoheroku"&gt;Push to Heroku&lt;/h4&gt;

&lt;p&gt;Before you push to Heroku, it's always a good idea to run &lt;code&gt;heroku local&lt;/code&gt; to &lt;a href="https://devcenter.heroku.com/articles/heroku-local"&gt;make sure&lt;/a&gt; your configuration is correct. If everything looks good then you can &lt;code&gt;git push heroku master&lt;/code&gt;. If that completes successfully you are good to go!&lt;/p&gt;</description><link>http://localhost:2368/publish-your-angular-app-to-heroku/</link><guid isPermaLink="false">15e168b2-d1c8-40ad-95ce-56b41f50e936</guid><category>node</category><category>angular</category><category>heroku</category><dc:creator>Jake Gardner</dc:creator><pubDate>Sat, 05 Dec 2015 05:45:41 GMT</pubDate></item><item><title>Be A Software Craftsman</title><description>&lt;p&gt;I recently read &lt;a href="http://www.mcbreen.ab.ca/SoftwareCraftsmanship/"&gt;Software Craftsmanship&lt;/a&gt; by Pete McBreen. If you haven't read this book, run out and get a copy fast!&lt;/p&gt;

&lt;p&gt;Pete suggests that software development should adopt an apprenticeship model. Simply teaching people language constructs in a classroom does not alone make them developers. Furthermore, people learn best by working with others more experienced than themselves. Pairing software "apprentices" with software "craftsmen" will result in a higher standard skill level in developers.&lt;/p&gt;

&lt;p&gt;On your software developer journey, once you get past learning syntax and frameworks and patterns, you think more broadly about how you can improve. The road to craftsmanship is how you can do that.&lt;/p&gt;

&lt;h4 id="howtobeasoftwarecraftsman"&gt;How to be a Software Craftsman&lt;/h4&gt;

&lt;h6 id="gettoknowyourtools"&gt;Get to know your tools&lt;/h6&gt;

&lt;p&gt;You can't expect to deliver high-quality solutions quickly if you are spending a lot of time figuring out how to use the tools. &lt;/p&gt;

&lt;p&gt;Invest the time in a set of tools you enjoy using, but that also have a large community so you can be sure that they will be around.&lt;/p&gt;

&lt;p&gt;Corollary to this is...&lt;/p&gt;

&lt;h6 id="dontfollowthehype"&gt;Don't follow the hype&lt;/h6&gt;

&lt;p&gt;Especially since the rebirth of Javascript, we have all been inundated with new frameworks, build tools, text editors, and every kind of widget inbetween.&lt;/p&gt;

&lt;p&gt;You must exercise good judgment about what to learn. If you are constantly jumping on the latest bandwagon, you will never achieve mastery of your toolset (see above).&lt;/p&gt;

&lt;h6 id="findamentor"&gt;Find a mentor&lt;/h6&gt;

&lt;p&gt;Perhaps the most important element in your path towards mastery is finding those more experienced than yourself and working with them.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Practice without feedback just reinforces errors&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Just as with any handcraft, art, or music, learning through imitation is a powerful force.&lt;/p&gt;

&lt;h6 id="knowthewholepicture"&gt;Know the whole picture&lt;/h6&gt;

&lt;p&gt;The industry seems to encourage role-specialization. While you should not attempt to master every &lt;em&gt;tool&lt;/em&gt; or &lt;em&gt;language&lt;/em&gt;, being as familiar with the end-to-end process of software development can only benefit you.&lt;/p&gt;

&lt;p&gt;You're a Front-ender? You absolutely should know how API's are written, and what has to take place for data to reach the client from the server. &lt;/p&gt;

&lt;p&gt;You're a Back-ender? You need to understand how the design is hindered or empowered by what you deliver from the server. &lt;/p&gt;

&lt;p&gt;All web and mobile developers need to be keen on UX/Design as well. Our world is ever-more-focused on well-designed products, and without user-centric thinking our development efforts are fruitless.&lt;/p&gt;

&lt;h6 id="neverstoplearning"&gt;Never stop learning&lt;/h6&gt;

&lt;p&gt;While the general flux in our industry creates a lot of noise as far as what to learn, it's important to keep an eye on the general trajectory. &lt;/p&gt;

&lt;p&gt;Fixed-width website designs gave way to fluid, responsive ones.&lt;/p&gt;

&lt;p&gt;Fully server-generated web pages gave way to mostly client-based ones.&lt;/p&gt;

&lt;p&gt;And recently more and more developers are moving from object-oriented languages to functional ones.&lt;/p&gt;

&lt;p&gt;Make learning a habit.&lt;/p&gt;

&lt;h6 id="wrapup"&gt;Wrap Up&lt;/h6&gt;

&lt;p&gt;Being a software craftsman is about striving for expertise and seeking a breadth and depth of experience so that you can deliver the highest-quality solutions.&lt;/p&gt;

&lt;p&gt;It's also about cultivating a intuition, knowing when it makes sense to deviate from a process or how to choose which technology to use.&lt;/p&gt;

&lt;p&gt;Finally, it's about taking real pride in your work so that you are constantly looking for ways you can improve.&lt;/p&gt;</description><link>http://localhost:2368/be-a-software-craftsman/</link><guid isPermaLink="false">9bf0addd-0189-4c53-9495-8fd102f95882</guid><dc:creator>Jake Gardner</dc:creator><pubDate>Wed, 11 Nov 2015 13:50:56 GMT</pubDate></item><item><title>Configuration files for your Node.js apps</title><description>&lt;p&gt;For any Node.js application that interacts with external resources (APIs, databases, etc), you will likely need some environment-specific configuration. Now, hopefully you are not hard-coding these values!&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;            // BAD! 
            mongodb.hostname = "databaseserver";
            mongodb.port = "27017";
            mongodb.database = "mydatabase";
            ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Storing these values in an external file makes it easy to change environments without having to modify the code. Fortunately, &lt;a href="https://nodejs.org/api/modules.html#modules_modules"&gt;require&lt;/a&gt; makes it easy to load values from .js or .json files.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;            // Better!
            var config = require('./dbconfig.js');

            mongodb.hostname = config.hostname;
            mongodb.port = config.port;
            mongodb.database = config.database;
            ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Require will parse either .js or .json files and return an object you can use in your code. &lt;/p&gt;

&lt;p&gt;Why choose .js or .json? I prefer to use .js for configuration while only use .json  for data (for example, &lt;a href="https://github.com/junit-team/junit/wiki/Test-fixtures"&gt;test fixtures&lt;/a&gt;). However, both formats achieve the same result.&lt;/p&gt;

&lt;h6 id="jsformat"&gt;.js format&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;            exports.hostname = "myserver";
            exports.port = "27017";
            exports.database = "mydatabase";
&lt;/code&gt;&lt;/pre&gt;

&lt;h6 id="jsonformat"&gt;.json format&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;            {
              "hostname": "myserver",
              "port": "27017",
              "database": "mydatabase"
            }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Knowing how easy this is to use, hope you will make use of external configuration files in your Node.js apps!&lt;/p&gt;</description><link>http://localhost:2368/configuration-files-for-your-node-js-apps/</link><guid isPermaLink="false">5a2060fe-ca31-46b7-ae7a-9fb852327856</guid><category>node</category><dc:creator>Jake Gardner</dc:creator><pubDate>Sun, 01 Nov 2015 13:19:33 GMT</pubDate></item><item><title>Podcasts for Web Developers</title><description>&lt;p&gt;There are many resources to learn about web development and keep abreast of changes -- books, blogs, conferences, video tutorials. I make use of all of these, however podcasts are great in that you can listen while you're on the go. Take advantage of that time commuting/walking/standing in line to learn something.&lt;/p&gt;

&lt;p&gt;These are some of my favorites. They cover a range of development related topics, from specific languages to developer worklife and career management.&lt;/p&gt;

&lt;h4 id="giantrobotssmashingintoothergiantrobots"&gt;Giant Robots [Smashing Into Other Giant Robots]&lt;/h4&gt;

&lt;p&gt;&lt;a href="http://localhost:2368/"&gt;Giant Robots&lt;/a&gt; is a podcast produced by &lt;a href="http://thoughtbot.com/"&gt;Thoughtbot&lt;/a&gt;. If you don't know Thoughtbot -- go check them out! They have released many open-source tools, have an informative &lt;a href="https://robots.thoughtbot.com/"&gt;blog&lt;/a&gt;, as well as a &lt;a href="https://upcase.com/"&gt;learning community&lt;/a&gt; to help developers upgrade their skills.&lt;/p&gt;

&lt;p&gt;Giant Robots was originally more Ruby/Rails focused, but lately has been more about developer process, interviews with noteworthy developers etc. They also keep episodes less than 40 minutes so that you can be sure to finish listening in one commute.&lt;/p&gt;

&lt;p&gt;Giant Robots also produce another more technical podcast called &lt;a href="http://bikeshed.fm/"&gt;The Bike Shed&lt;/a&gt;. Worth a look if you're hungry for more content.&lt;/p&gt;

&lt;h4 id="javascriptjabber"&gt;Javascript Jabber&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://devchat.tv/js-jabber"&gt;Javascript Jabber&lt;/a&gt; is a round-table discussion on the latest developments in the Javascript world. Joe Eames (&lt;a href="http://www.ng-conf.org/"&gt;ngconf&lt;/a&gt; founder) is a weekly co-host.&lt;/p&gt;

&lt;p&gt;This podcast tends to get deeply techical and sometimes runs a bit long, but I find it invaluable to learn about libraries or features I haven't had a chance to try myself.&lt;/p&gt;

&lt;h4 id="developertea"&gt;Developer Tea&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://developertea.com/"&gt;Developer Tea&lt;/a&gt; may be my favorite of this bunch, simply for the reason that the host &lt;a href="http://localhost:2368/"&gt;&lt;/a&gt; takes on issues that are not discussed in typical development podcasts. Topics include time management, career progression, choosing what to learn, how to handle interviews, and many more.&lt;/p&gt;

&lt;p&gt;Most episodes are fifteen minutes or less so you have no excuse not to fit this into your day somewhere!&lt;/p&gt;

&lt;h4 id="shoptalkshow"&gt;Shop Talk Show&lt;/h4&gt;

&lt;p&gt;&lt;a href="http://shoptalkshow.com/"&gt;Shop Talk Show&lt;/a&gt; is probably better suited for pure front-enders or web designers, but nonetheless is unparalleled in content on design, useability, web standards etc. It is made only more awesome by the sense of humor of hosts Chris Coyier (&lt;a href="https://css-tricks.com/"&gt;CSS Tricks&lt;/a&gt;) and Dave Rupert.&lt;/p&gt;

&lt;h4 id="the4hourworkweek"&gt;The 4-Hour Workweek&lt;/h4&gt;

&lt;p&gt;Ok, this is not on web development! But I had to mention the &lt;a href="http://fourhourworkweek.com/podcast/"&gt;podcast&lt;/a&gt; of writer Tim Ferriss. In each episode, Tim interviews world-class performers in a broad array of fields. Athletes, entrepreneurs, investors, producers, you name it.&lt;/p&gt;

&lt;p&gt;I find this is relevant to web developers in the sense of finding people (developers) you admire, deconstructing how they became successful and doing your best to emulate. It is hard not to draw inspiration from each of the interviewees stories' to set ambitious goals for oneself and relentlessly pursue them. &lt;/p&gt;

&lt;p&gt;If all web developers adopted this philosophy, our field would be all the better for it.&lt;/p&gt;</description><link>http://localhost:2368/podcasts-for-web-developers/</link><guid isPermaLink="false">9e9d361a-a572-407c-a6f0-431f830666ce</guid><category>resources</category><dc:creator>Jake Gardner</dc:creator><pubDate>Sun, 25 Oct 2015 13:40:58 GMT</pubDate></item></channel></rss>