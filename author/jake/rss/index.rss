<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Jake Gardner - Jake Gardner</title><description>Explorations in development.</description><link>http://blog.jakegardner.me/</link><generator>Ghost 0.5</generator><lastBuildDate>Sat, 05 Oct 2019 04:10:18 GMT</lastBuildDate><atom:link href="http://blog.jakegardner.me/author/jake/rss/" rel="self" type="application/rss+xml"/><ttl>60</ttl><item><title>Fastlane Match: manually updating the git repo</title><description>&lt;p&gt;There have been a couple of times where I wanted to replace a signing certificate in use with one of our apps. &lt;br&gt;
For example, a certificate is expiring soon, and I want to create a new one and seamlessly transfer to the new certificate without orphaning app installs still using the old certificate.&lt;/p&gt;

&lt;p&gt;Your only option via &lt;code&gt;fastlane&lt;/code&gt; is to &lt;code&gt;fastlane nuke&lt;/code&gt; and start over. But this removes &lt;em&gt;everything&lt;/em&gt;, and invalidates the signing of your existing installed apps. [To be fair, this is only for enterprise deployments, i.e. non-app store.]&lt;/p&gt;

&lt;p&gt;After creating a new certificate and provisioning profile pair in the Apple Developer Portal, you can then follow the steps below to get them in the match git repo so they will get picked up by &lt;code&gt;fastlane match&lt;/code&gt;, while the old certificate and profile are still valid on the Developer Portal.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Run &lt;code&gt;irb&lt;/code&gt; in the terminal, followed by these commands:  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;require 'match'&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;git_url = '&amp;lt;github url&amp;gt;'&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;workspace = Match::GitHelper.clone(git_url, false)&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;Open the workspace directory reported by the previous command in Finder.  &lt;/li&gt;
&lt;li&gt;In the &lt;code&gt;certs&lt;/code&gt; folder, replace the &lt;code&gt;.cer&lt;/code&gt; and &lt;code&gt;.p12&lt;/code&gt; files with the new versions.  &lt;/li&gt;
&lt;li&gt;In the &lt;code&gt;profiles&lt;/code&gt; folder, replace the provisioning profile.  &lt;/li&gt;
&lt;li&gt;Back in the &lt;code&gt;irb&lt;/code&gt; console, run &lt;code&gt;Match::GitHelper.commit_changes(workspace, "manual profile update", git_url)&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;That's it.&lt;/p&gt;</description><link>http://blog.jakegardner.me/fastlane-match-manually-updating-the-git-repo/</link><guid isPermaLink="false">741a0e88-cd5e-4ba7-a4d1-00985779b02d</guid><dc:creator>Jake Gardner</dc:creator><pubDate>Sat, 03 Nov 2018 12:03:18 GMT</pubDate></item><item><title>React Native: Invoking React component callback from Native</title><description>&lt;p&gt;One day, you may need to create a native UI component and expose it to React Native as a standard JSX component. I encountered this recently, needing to integrate some third-party functionality via a provided native View Controller (iOS) / Fragment (Android).&lt;/p&gt;

&lt;p&gt;The piece of this which I found was not so well documented was how to invoke a callback defined on the React component from within the native code. So after spending the time to piece it together, I bring you this short walkthrough.&lt;/p&gt;

&lt;h3 id="ios"&gt;iOS&lt;/h3&gt;

&lt;p&gt;First, you will need to create a class inheriting from &lt;code&gt;RCTViewManager&lt;/code&gt; which will make React Native aware of and able to load your component.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// MyComponentManager.h
#import &amp;lt;React/RCTViewManager.h&amp;gt;

@interface MyComponentManager : RCTViewManager

@end

// MyComponentManager.m
#import "MyComponentManager.h"
@implementation MyComponentManager

RCT_EXPORT_MODULE();

RCT_EXPORT_VIEW_PROPERTY(myCallback, RCTBubblingEventBlock);

@end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The most important things here are &lt;code&gt;RCT_EXPORT_MODULE()&lt;/code&gt; and &lt;code&gt;RCT_EXPORT_VIEW_PROPERTY()&lt;/code&gt;. The first registers your component with React Native. The second allows the passing of a method property called &lt;code&gt;myComponent&lt;/code&gt; over the bridge, which can then be invoked within your native component.&lt;/p&gt;

&lt;p&gt;Next, create a class inheriting from &lt;code&gt;UIView&lt;/code&gt; to render the UI of your component.  &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#import &amp;lt;UIKit/UIView.h&amp;gt;
#import &amp;lt;React/RCTComponent.h&amp;gt;

@interface MyComponent : UIView

@property (nonatomic, copy) RCTBubblingEventBlock myCallback;

@end

@implementation MyComponent
    ...
- (void) onButtonPress {
  self.myCallback(@{ data: 'data sent from native' });
}
    ...
@end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;myCallback&lt;/code&gt; method is defined in your component interface as a property of type &lt;code&gt;RCTBubblingEventBlock&lt;/code&gt; matching that as defined in the manager interface. In your &lt;code&gt;MyComponent&lt;/code&gt; view class, you can invoke the method wherever appropriate, but the parameter you pass must be a dictionary i.e. &lt;code&gt;@{...}&lt;/code&gt;. This dictionary will be received on the Javascript side as a plain object. Here, I'm just calling the method within a button press handler.&lt;/p&gt;

&lt;p&gt;Lastly, you need to instantiate your view component, &lt;code&gt;MyComponent&lt;/code&gt;, in the manager component, &lt;code&gt;MyComponentManager&lt;/code&gt;. When you load your component within React, React will create the &lt;code&gt;MyComponentManager&lt;/code&gt;, but without this step, it will not have any UI. You will have just loaded an empty native module.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// MyComponentManager.m
#import "MyComponentManager.h"
#import "MyComponent.h" // include your view component header
@implementation MyComponentManager

RCT_EXPORT_MODULE();

RCT_EXPORT_VIEW_PROPERTY(myCallback, RCTBubblingEventBlock);

// add your view component as the "view" for your component manager
- (UIView *)view
{
  return [[MyComponent alloc] init];
}

@end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Lets have a look at the analog of these steps for Android before showing how you make the connection in Javascript below.&lt;/p&gt;

&lt;h3 id="android"&gt;Android&lt;/h3&gt;

&lt;p&gt;First, create a package class and register it.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// MyComponentPackage.java
package me.jakegardner.mycomponent;

import com.facebook.react.ReactPackage;  
import com.facebook.react.bridge.JavaScriptModule;  
import com.facebook.react.bridge.NativeModule;  
import com.facebook.react.bridge.ReactApplicationContext;  
import com.facebook.react.uimanager.ViewManager;

import java.util.Arrays;  
import java.util.Collections;  
import java.util.List;

public class MyComponentPackage implements ReactPackage {

    @Override
    public List&amp;lt;NativeModule&amp;gt; createNativeModules(ReactApplicationContext reactContext) {
        return Arrays.&amp;lt;NativeModule&amp;gt;asList(

        );
    }

    public List&amp;lt;Class&amp;lt;? extends JavaScriptModule&amp;gt;&amp;gt; createJSModules() {
        return Collections.emptyList();
    }

    @Override
    public List&amp;lt;ViewManager&amp;gt; createViewManagers(ReactApplicationContext reactContext) {
        return Collections.&amp;lt;ViewManager&amp;gt;singletonList(

        );
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;// MainApplication.java
import me.jakegardner.mycomponent.MyComponentPackage;  
...
protected List&amp;lt;ReactPackage&amp;gt; getPackages() {  
    return Arrays.&amp;lt;ReactPackage&amp;gt;asList(
        new MyComponentPackage() // register here
    );
  }
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next, create a module class and add it to your &lt;code&gt;createNativeModules&lt;/code&gt; method in &lt;code&gt;MyComponentPackage.java&lt;/code&gt;.  &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// MyComponentModule.java
package me.jakegardner.mycomponent;

import com.facebook.react.bridge.ReactApplicationContext;  
import com.facebook.react.bridge.ReactContextBaseJavaModule;

public class MyComponentModule extends ReactContextBaseJavaModule {

    public MyComponentModule(ReactApplicationContext reactContext) {
        super(reactContext);
    }

    @Override
    public String getName() {
        return "MyComponent";
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;// MyComponentPackage.java
@Override
    public List&amp;lt;NativeModule&amp;gt; createNativeModules(ReactApplicationContext reactContext) {
        return Arrays.&amp;lt;NativeModule&amp;gt;asList(
            new MyComponentModule(reactContext) // add here
        );
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next, create your view and view manager classes.  &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// MyComponentView.java
package me.jakegardner.mycomponent;

public class MyComponentView extends FrameLayout {  
    ...

    ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;// MyComponentManager.java
package me.jakegardner.mycomponent;

public class MyComponentManager extends SimpleViewManager&amp;lt;MyComponentView&amp;gt; {  
    private static final String REACT_CLASS = "MyComponent";

    @Override
    public String getName() {
        return REACT_CLASS;
    }

    @Override
    public MyComponentView createViewInstance(ThemedReactContext context) {
        return new MyComponentView(context);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Add your view manager class to the &lt;code&gt;createViewManagers&lt;/code&gt; method in your package class.  &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// MyComponentPackage.java
...
@Override
    public List&amp;lt;ViewManager&amp;gt; createViewManagers(ReactApplicationContext reactContext) {
        return Collections.&amp;lt;ViewManager&amp;gt;singletonList(new MyComponentManager());
}
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Defining the callback method which can be invoked in your native view is done, as with iOS, in the manager class.  &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;...
// add this method
@Override
    public @Nullable Map getExportedCustomDirectEventTypeConstants() {
        return MapBuilder.of(
            "myCallback",
            MapBuilder.of("registrationName", "myCallback"),
        );
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;getExportedCustomDirectEventTypeConstants&lt;/code&gt; registers the property names which will be passed over the bridge. If you need multiple callbacks, just add additional pairs of parameters to the first &lt;code&gt;MapBuilder.of&lt;/code&gt; call.  &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;return MapBuilder.of(  
    "myCallbackOne",
    MapBuilder.of("registrationName", "myCallbackOne"),
    "myCallbackTwo",
    MapBuilder.of("registrationName", "myCallbackTwo"),
);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, in your view class, you can invoke the callback method.  &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// MyComponentView.java
...
private void onButtonPress() {  
    WritableMap map = Arguments.createMap();
    map.putString("data", "data sent from native");
    final ReactContext context = (ReactContext) getContext();
    context.getJSModule(RCTEventEmitter.class).receiveEvent(
        getId(),
        "myCallback",
        map
    );
}
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As with iOS, the parameter to the callback is a dictionary (or map). &lt;/p&gt;

&lt;h3 id="reactnative"&gt;React Native&lt;/h3&gt;

&lt;p&gt;Now, back in JS, create a new component.  &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// MyComponent.js
import { requireNativeComponent, ViewPropTypes } from 'react-native';  
import PropTypes from 'prop-types';

const iface = {  
  name: 'MyComponent',
  propTypes: {
    myCallback: PropTypes.func,
    ...ViewPropTypes,
  },
};

export default requireNativeComponent('MyComponent', iface);  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here we load the component by name from the native side. The name must match the name defined in &lt;code&gt;getName()&lt;/code&gt; in the module class in the case of Android, or the name of the manager class &lt;em&gt;minus&lt;/em&gt; the word &lt;code&gt;Manager&lt;/code&gt; for iOS.&lt;/p&gt;

&lt;p&gt;Now, we can use this component in any JSX, passing our callback.  &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class MyComponentContainer extends React.Component {  
    handleCallback(event) {
        console.log(event.nativeEvent.data); // "data sent from native"
    }

    render() {
        return &amp;lt;MyComponent myCallback={this.handleCallback} /&amp;gt;;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;One thing to note is that your callback will receive an event object. The data you sent from native will be assigned to the &lt;code&gt;nativeEvent&lt;/code&gt; property on that event object.&lt;/p&gt;</description><link>http://blog.jakegardner.me/react-native-invoke-callback-prop-from-within-a-native-component/</link><guid isPermaLink="false">f2724a41-7a68-41eb-b45d-ef81a96e1fee</guid><dc:creator>Jake Gardner</dc:creator><pubDate>Sun, 24 Jun 2018 06:37:27 GMT</pubDate></item><item><title>Book Reviews: Peopleware, The Mythical Man-Month</title><description>&lt;p&gt;This set of reviews is on two classic tomes that have been on my to-read list for some time.&lt;/p&gt;

&lt;h3 id="peoplewareproductiveprojectsandteams"&gt;Peopleware: Productive Projects and Teams&lt;/h3&gt;

&lt;p&gt;This book is written from the perspective of advising a manager of software developers, but certainly should be read by ANYONE working in software development. The basic premise is that a typical office environment, traditional management styles, and culture of overtime in our industry decrease developer productivity. It contains many insights which a single person could only piece together after an entire career of working on development teams. Take advantage of other's experience!&lt;/p&gt;

&lt;p&gt;Following are some of my highlights:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The structure of a team is a network, not a hierarchy. For all the deference paid to the concept of leadership (a cult word in our industry), it just doesn’t have much place here.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Open plan workspace? Think again.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;"The bald fact is that many companies provide developers with a workplace that is so crowded, noisy, and interruptive as to fill their days with frustration."&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"An hour in flow really accomplishes something, but 10 six-minute work periods sandwiched between 11 interruptions won’t accomplish anything."&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Most non-developers do not realize that software development is actually a creative discipline that requires deep focus.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;"Nobody can really work much more than forty hours, at least not continually and with the level of intensity required for creative intellectual work."&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"If you are charged with getting a task done, what proportion of your time ought to be dedicated to actually doing the task? Not 100 percent. There ought to be some provision for brainstorming, investigating new methods, figuring out how to avoid doing some of the subtasks, reading, training, and just goofing off."&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Good developers thrive on autonomy and trust.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The mark of the best manager is an ability to single out the few key spirits who have the proper mix of perspective and maturity and then turn them loose.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;People who feel untrusted have little inclination to bond together into a cooperative team.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="themythicalmanmonthessaysonsoftwareengineering"&gt;The Mythical Man-Month: Essays on Software Engineering&lt;/h3&gt;

&lt;p&gt;This book is also related to team productivity and success but focuses more on project failure caused by scheduling mishaps. It gives a sort-of lessons-learned from the experience of managing the development of the OS/360 operating system. I think it is especially important for project managers in the software industry to read to understand how traditional methods do not work when it comes to development.&lt;/p&gt;

&lt;p&gt;Following are some of my highlights:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Hardly any projects succeed in less than 3/4 of the calculated optimum schedule, regardless of the number of people applied!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;One point that really resonated with me is the idea of "conceptual integrity", having experienced the chaos that ensues when many people are allowed to introduce different ideas into one codebase and everyone is too timid to refactor something they didn't write.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;"I will contend that conceptual integrity is the most important consideration in system design. It is better to have a system omit certain anomalous features and improvements, but to reflect one set of design ideas, than to have one that contains many good but independent and uncoordinated ideas."&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"Conceptual integrity in turn dictates that the design must proceed from one mind, or from a very small number of agreeing resonant minds."&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Scheduling is often done assuming all developers are strictly coding and for long hours.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;"...teams were only realizing 50 percent of the working week as actual programming and debugging time. Machine downtime, higher-priority short unrelated jobs, meetings, paperwork, company business, sickness, personal time, etc. accounted for the rest. In short, the estimates made an unrealistic assumption about the number of technical work hours per man-year."&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Adding people does not help the schedule in the short-term. "Communication effort" increases, and the inevitable communication breakdown that occurs as people increase causes introduction of competing or redundant ideas into the system (bugs).&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;"Since software construction is inherently a systems effort—an exercise in complex interrelationships—communication effort is great, and it quickly dominates the decrease in individual task time brought about by partitioning. Adding more men then lengthens, not shortens, the schedule."&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"When a task cannot be partitioned because of sequential constraints, the application of more effort has no effect on the schedule."&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And early praise for iterative development (this book was first published in 1975).&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;"I would go a step further and assert that it is really impossible for clients, even those working with software engineers, to specify completely, precisely, and correctly the exact requirements of a modern software product before having built and tried some versions of the product they are specifying."&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"Much of present-day software acquisition procedures rests upon the assumption that one can specify a satisfactory system in advance, get bids for its construction, have it built, and install it. I think this assumption is fundamentally wrong, and that many software acquisition problems spring from that fallacy."&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;</description><link>http://blog.jakegardner.me/book-review-peopleware-mythical-man-month/</link><guid isPermaLink="false">27a2cf0d-369a-4040-8360-75e2cb8f6605</guid><dc:creator>Jake Gardner</dc:creator><pubDate>Sun, 10 Jun 2018 05:42:54 GMT</pubDate></item><item><title>First Foray Into Machine Learning</title><description>&lt;p&gt;I spent several weeks learning about and experimenting with machine learning. It has been a hot topic in recent years and is behind many of the innovations we are benefitting from today. Plus, the possibility that in the near future we could be able to model human cognition is pretty exciting.&lt;/p&gt;

&lt;p&gt;Here I want to give a recap of what I learned and provide a little bit of guidance for those who want to get started with machine learning but don't know where to begin. It can seem daunting at first, but once you get past all of the unfamiliar terminology and learn about the great libraries around, harnessing this tool is quite doable.&lt;/p&gt;

&lt;h3 id="thealgorithms"&gt;The Algorithms&lt;/h3&gt;

&lt;h6 id="supervisedlearningtellthemachinewhatswhat"&gt;Supervised Learning (Tell The Machine What's What)&lt;/h6&gt;

&lt;p&gt;Supervised learning entails processing a labeled dataset in order to build a model. What do I mean by labeled? For example, an apple [label] is red [attribute 1] and weighs 150g [attribute 2]. What do I mean by model? The model is the collection of knowledge that the algorithm uses to make decisions.&lt;/p&gt;

&lt;p&gt;When testing the algorithm on new data, if a match on the features is made, the algorithm can confirm that the sample (a data item) should be assigned a known label. Conversely, if a sample does not match the features (attributes) of a known label, it will not be matched. For example, if a sample is encountered that is orange and weighs 50g, it is probably not an apple. This entire process is called Classification.&lt;/p&gt;

&lt;p&gt;The common supervised algorithms are Logistic Regression, Support Vector Machines, and Decision Trees. &lt;/p&gt;

&lt;h6 id="unsupervisedlearningletthemachinefigureitout"&gt;Unsupervised Learning (Let The Machine Figure It Out)&lt;/h6&gt;

&lt;p&gt;On the other hand, unsupervised learning is where you have unlabeled data and rely on the algorithm to distinguish the different classes based on inspecting the attributes of each sample in the dataset and noting similarities.&lt;/p&gt;

&lt;p&gt;This is accomplished with the straightforward K-means Clustering algorithm, aka "nearest neighbor" algorithm. This algorithm works by comparing a sample with it's neighbors, and grouping it with the neighbor whose feature value is nearest to its own. This process repeats until no regroupings can be made and you are left with clusters of features. There are your classes.&lt;/p&gt;

&lt;h3 id="thetools"&gt;The Tools&lt;/h3&gt;

&lt;h6 id="scikitlearn"&gt;scikit-learn&lt;/h6&gt;

&lt;p&gt;The most popular library is the Python module scikit-learn. There are others, but this is the perfect place to start and will give you a lot of runway.&lt;/p&gt;

&lt;h6 id="matlab"&gt;Matlab&lt;/h6&gt;

&lt;p&gt;Part and parcel of the machine learning toolkit, Matlab allows you to make plots of your datasets and visualize the results of your learning models.&lt;/p&gt;

&lt;h3 id="theprocess"&gt;The Process&lt;/h3&gt;

&lt;h6 id="preparethedata"&gt;Prepare The Data&lt;/h6&gt;

&lt;p&gt;Having a good dataset is critical. You need to remove any samples that are missing feature values, or exclude those features. Also, eliminate any features that are not necessary for distinguishing meaningful classifications in your data. Fewer features to analyze means less processing is required.&lt;/p&gt;

&lt;h6 id="choosealgorithm"&gt;Choose Algorithm&lt;/h6&gt;

&lt;p&gt;You have some decisions to make based on your data. If your data is structured and you have well-defined classes, you use a supervised algorithm. If your data is unstructured you choose an unsupervised approach.&lt;/p&gt;

&lt;p&gt;And then there's the questions of performance and accuracy. Some algorithms are inherently less performant on large datasets. Tuning algorithm parameters can also give you some gains in performance and accuracy.&lt;/p&gt;

&lt;h6 id="traintesttunerepeat"&gt;Train, Test, Tune, Repeat&lt;/h6&gt;

&lt;p&gt;Whatever algorithm you choose, the process is pretty much the same.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Divide dataset into training and test datasets.  &lt;/li&gt;
&lt;li&gt;Train your model on your training dataset.  &lt;/li&gt;
&lt;li&gt;Check your accuracy on test dataset.  &lt;/li&gt;
&lt;li&gt;Tune algorithm parameters.  &lt;/li&gt;
&lt;li&gt;Re-train your model until you reach the accuracy you require.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id="learningpath"&gt;Learning Path&lt;/h3&gt;

&lt;h6 id="beforeyoubegin"&gt;Before You Begin&lt;/h6&gt;

&lt;p&gt;A lot of machine learning courses list pre-requisites of statistics and linear algebra courses. I found that this was not really necessary. If you want to understand the formulas behind certain algorithms, you had better have calculus still fresh in mind (I skimmed over these definitions).&lt;/p&gt;

&lt;p&gt;However, it will make it easier before you begin if you at least know:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;What's a vector?  &lt;/li&gt;
&lt;li&gt;What's a matrix?  &lt;/li&gt;
&lt;li&gt;What do linear/quadratic/logarithmic graphs look like? &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://www.khanacademy.org/"&gt;Khan Academy&lt;/a&gt; is a good place to brush up on these.&lt;/p&gt;

&lt;h6 id="whatidid"&gt;What I Did&lt;/h6&gt;

&lt;p&gt;I looked at a few different courses, but ultimately decided on Google's Udacity course Introduction to Machine Learning. I felt this was a good pace, and provided a broad enough introduction without getting too far into the weeds.&lt;/p&gt;

&lt;p&gt;I paired the Udacity course with the excellent book, &lt;a href="https://www.amazon.com/Python-Machine-Learning-Sebastian-Raschka-ebook/dp/B00YSILNL0"&gt;Python Machine Learning&lt;/a&gt; by Sebastian Raschka. Sebastian's book starts from the earliest building block of machine learning (the Perceptron), and continues all the way to building a neural network. There is more depth here than the Udacity course and the math behind the algorithms is explained if you are interested.&lt;/p&gt;

&lt;p&gt;Once I felt comfortable with the concepts thus far, I worked through some tutorials on Kaggle. Kaggle is a community for machine learning, providing exercises and hosting competitions. I found their tutorials on deep learning easy to follow.&lt;/p&gt;

&lt;h6 id="alternatives"&gt;Alternatives&lt;/h6&gt;

&lt;p&gt;The Stanford course is quite popular, but to me it seemed very algorithm-focused and covered a lot in a short amount of time. If you have the time (and money), this can be a good option.&lt;/p&gt;

&lt;p&gt;Udacity also hosts the machine learning courses corresponding to Georgia Tech's OMSCS program. These courses are more drawn out than the Intro course, spanning three different sessions for the same breadth.&lt;/p&gt;

&lt;h3 id="retrospective"&gt;Retrospective&lt;/h3&gt;

&lt;p&gt;What struck me most was how little code was required to make some conclusion about a dataset. The truth is that all of the hard work is encapsulated in the algorithms provided by libraries. Developing a machine learning solution is more a matter of ensuring you have good data and selecting an appropriate algorithm to use.&lt;/p&gt;

&lt;p&gt;Ofcourse, if you want to innovate in this area or seek performance gains for a machine learning system, you need intimate knowledge of the algorithms and significant background in calculus and statistics.&lt;/p&gt;

&lt;p&gt;I'm more interested in the less math-y aspects of computer science but it will interesting to follow the continuing research in deep learning and the potential unleashed by advancements therein.&lt;/p&gt;</description><link>http://blog.jakegardner.me/my-life-with-the-machine-learning-kult/</link><guid isPermaLink="false">84104df4-e1f0-4469-bfdf-8ddc8c258bae</guid><dc:creator>Jake Gardner</dc:creator><pubDate>Sat, 01 Apr 2017 09:49:22 GMT</pubDate></item><item><title>December Picks - Release It!, Continuous Delivery</title><description>&lt;p&gt;With an important release coming up at work, my mind has been on stability, testing, and continuous delivery. So in my usual fashion I sought out the highest regarded wisdom and pored through these two books.&lt;/p&gt;

&lt;h4 id="releaseitmichaeltnygard"&gt;Release It! - Michael T. Nygard&lt;/h4&gt;

&lt;p&gt;&lt;img src="http://blog.jakegardner.me/content/images/2017/01/releaseit-1.jpg" alt=""&gt;&lt;/p&gt;

&lt;p&gt;Release It! is about planning, testing, and releasing production software. And why a significant number of projects fail at the release stage.&lt;/p&gt;

&lt;p&gt;I see the two main topics in this book as design and testing. How you approach these ultimately decide the success of your project.&lt;/p&gt;

&lt;h6 id="design"&gt;Design&lt;/h6&gt;

&lt;blockquote&gt;
  &lt;p&gt;Design and architecture decisions are also financial decisions.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Design determines implementation and maintenance costs as well as your exposure to risk. &lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Bugs will happen. They cannot be eliminated, so they must be survived instead.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Through design we reduce bugs as much as possible, but also accept that some will still happen and plan accordingly to reduce the impact on the system.&lt;/p&gt;

&lt;h6 id="testing"&gt;Testing&lt;/h6&gt;

&lt;p&gt;Unit tests (and TDD) have been hot-topics in recent years, but there are other types of testing you must do to have a successful production release: longevity and capacity tests, and running all tests in the production (or identical) environment. &lt;/p&gt;

&lt;p&gt;Some bugs only appear after a system has been running for a very long time. As developers are constantly starting fresh when coding, these types of bugs are missed.&lt;/p&gt;

&lt;p&gt;Capacity testing should encompass not just a high number of requests, but the most expensive operation in the system for a sustained period of time. You should have an idea of what typical usage patterns will be like, but also plan for the unexpected (DOS-like) scenarios.&lt;/p&gt;

&lt;h6 id="patterns"&gt;Patterns&lt;/h6&gt;

&lt;p&gt;Other than ideas on these, a number of anti-patterns and patterns are presented to help you make you project stable. &lt;br&gt;
Two key patterns that I put to immediate use are the circuit breaker and the pathological test harness. &lt;/p&gt;

&lt;p&gt;A circuit breaker is a switch you put in your api call module to prevent repeated failed calls. The maxim behind this is that if a call fails, another immediately after will likely also fail. Once a defined cool off period has passed the breaker can be reset. This can reduce pressure on your backend service as well as avoid making unnecessary calls client-side.&lt;/p&gt;

&lt;p&gt;The “pathological” test harness is a module you develop to give canned (unexpected) responses to api calls to test how your program behaves. Too often developers only test happy-path responses. What about an api which always responds after 10 seconds (or never?), or returns invalid (or garbage) data? A backend may succumb to excessive load, will your client crash as a result?&lt;/p&gt;

&lt;p&gt;Some of the advice is Java-focused (there are a number of patterns around threading, managing connection pools etc), but still a lot of value for any platform.&lt;/p&gt;

&lt;h4 id="continuousdeliveryjezhumbledavidfarley"&gt;Continuous Delivery - Jez Humble, David Farley&lt;/h4&gt;

&lt;p&gt;&lt;img src="http://blog.jakegardner.me/content/images/2017/01/CD.jpg" alt=""&gt;
Continuous Delivery is an alternative to the waterfall approach of releasing software (developing for a LONG time, followed by a test phase, followed by a big-moment release - praying included) where instead you ensure that you always have a releasable product. The facilitator for this, and the focus of much of the book is the delivery pipeline.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;How long would it take your organization to deploy a change that involves just one single line of code? Do you do this on a repeatable, reliable basis?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h6 id="whycontinousdelivery"&gt;Why Continous Delivery?&lt;/h6&gt;

&lt;blockquote&gt;
  &lt;p&gt;The main advantage of the deployment pipeline lies in the rapid feedback you get on the effect of every change on the fully integrated application—something that is impossible in the source promotion model.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;First off, why should you aim for continuous delivery? Simply, only if you are frequently (daily/hourly) integrating code and building the release product can you know the quality of your project. &lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;In software, when something is painful, the way to reduce the pain is to do it more frequently, not less.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A second important point is that delaying implementing the production release process until the delivery target date means that it will be done with zero prior experience. Doing this process hundreds, thousands of times beforehand means that it will be a trivial non-event when it really does matter.&lt;/p&gt;

&lt;p&gt;Lastly, the waterfall approach to development makes each phase a black box - development, testing, operations teams are left out of each others decisions and internal processes. Having a continuous delivery pipeline requires cooperation of all teams or roles from the beginning and make the entire process transparent to stakeholders and management as well.&lt;/p&gt;

&lt;h6 id="thepipeline"&gt;The Pipeline&lt;/h6&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Commit tests&lt;/strong&gt;. Unit tests and coverage metric checks&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Automated acceptance tests&lt;/strong&gt;. Business-value features that must work.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;The objective of acceptance tests is to prove that our application does what the customer meant it to, not that it works the way its programmers think it should.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Environment/Capacity tests&lt;/strong&gt;. Check availability of network services and verify performance under load.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Manual testing&lt;/strong&gt;. For verification of user experience, and acceptance tests performed by stakeholders. Since not every organization will want automated release through to  production, this stage acts as a gate that key decision makers can use to certify builds. The promotion to this stage and release beyond it should be push-button though.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Automated release&lt;/strong&gt;. Repeatable, auditable scripted deploys. Using scripts ensures consistency and elimination of human-errors in performing IDE builds.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;It should be possible for a new team member to sit down at a new workstation, check out the project’s revision control repository, and run a single command to build and deploy the application to any accessible environment, including the local development workstation. It should also be possible to see which build of your various applications is deployed into each of your environments, and which versions in version control these builds came from.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Similar to Release It, a lot of specific advice is targeted at the Java ecosystem, but one can easily take each step in the pipeline and adapt it to your platform and environment.&lt;/p&gt;

&lt;p&gt;Developing the pipeline is no small task and is likely the most important one for your project. The earlier you start, the better. It’s easier to set the foundation in each step when there are few (or no) features than when you have actual users. The authors provide this five step process to get you there:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Model your value stream and create a walking skeleton.  &lt;/li&gt;
&lt;li&gt;Automate the build and deployment process.  &lt;/li&gt;
&lt;li&gt;Automate unit tests and code analysis.  &lt;/li&gt;
&lt;li&gt;Automate acceptance tests.  &lt;/li&gt;
&lt;li&gt;Automate releases.&lt;/li&gt;
&lt;/ol&gt;</description><link>http://blog.jakegardner.me/december-picks-release-it-continuous-delivery/</link><guid isPermaLink="false">08fef945-7557-46e4-9c8c-177cf55876ba</guid><dc:creator>Jake Gardner</dc:creator><pubDate>Sat, 07 Jan 2017 06:17:16 GMT</pubDate></item><item><title>June Picks - Redux, Soft Skills</title><description>&lt;p&gt;A bit late getting to picks this month... I've been in four different time zones in the past two weeks. Finally getting back to my usual routine!&lt;/p&gt;

&lt;h3 id="buildingreactapplicationswithidiomaticredux"&gt;Building React Applications with Idiomatic Redux&lt;/h3&gt;

&lt;p&gt;The newest &lt;a href="https://egghead.io/courses/building-react-applications-with-idiomatic-redux"&gt;series of videos&lt;/a&gt; from &lt;a href="https://twitter.com/dan_abramov"&gt;Dan Abramov&lt;/a&gt; could easily be called Redux: The Missing Manual. He covers many topics you will encounter in building Redux applications such as loading asynchronous data, routing, logging, and persistence. I like that not only are the solutions he provides very concise, but that he continually refactors while progressing through the videos.&lt;/p&gt;

&lt;p&gt;Redux has matured quite a bit in the past year, and this series shows elegant solutions to common application concerns.&lt;/p&gt;

&lt;h3 id="softskillsjohnsonmez"&gt;Soft Skills - John Sonmez&lt;/h3&gt;

&lt;p&gt;This is a book that should be gifted to all new developers. In university or bootcamps, they teach you to code, they do not teach you the business of being a developer or how to manage relationships and yourself throughout your career. &lt;/p&gt;

&lt;p&gt;I'm glad that John has laid this out in a simple, accessible way. Some of the lessons here I had to learn the hard way myself. &lt;/p&gt;

&lt;p&gt;John also gives his account of going from employee to entrepreneur and his career-long experience in real estate investment. It's important for everyone to plan for the future, but developers being especially well-paid in the US, it's even more critical that they learn to manage their finances.&lt;/p&gt;</description><link>http://blog.jakegardner.me/june-picks/</link><guid isPermaLink="false">0038e3e0-7659-4049-9aad-a181b778520c</guid><dc:creator>Jake Gardner</dc:creator><pubDate>Mon, 11 Jul 2016 03:17:56 GMT</pubDate></item><item><title>Redux: Thunk vs. Saga</title><description>&lt;p&gt;Two of the most common ways of dealing with side effects in Redux applications today are thunks and sagas.&lt;/p&gt;

&lt;h3 id="thunkyougotfunctionallinmyactions"&gt;Thunk: You Got Function All In My Actions&lt;/h3&gt;

&lt;p&gt;Most people will ask, what's a thunk? And why do I need it?&lt;/p&gt;

&lt;p&gt;The most straightforward explanation of a thunk I've seen is by Kyle Simpson (of You Don't Know JS fame) in his &lt;a href="https://frontendmasters.com/courses/rethinking-async-js/"&gt;Rethinking Asynchronous Javascript&lt;/a&gt; course for Front End Masters (highly recommended!).&lt;/p&gt;

&lt;p&gt;&lt;em&gt;A thunk is a function that already has everything it needs to execute.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;What does that have to do with redux thunk? I'm not sure either.&lt;/p&gt;

&lt;p&gt;As you know, in Redux, actions are defined by JSON. Redux-thunk allows you to send a function instead. Rather than [only] prescribe a state change for the reducer to carry out, you can write some logic to execute immediately and dispatch other actions. &lt;/p&gt;

&lt;p&gt;This is great for small use cases, however for more than a few functions, a better approach is &lt;a href="http://redux.js.org/docs/advanced/Middleware.html"&gt;middleware&lt;/a&gt; ... or sagas.&lt;/p&gt;

&lt;h6 id="howdoiusethisthing"&gt;How do I use this thing?&lt;/h6&gt;

&lt;p&gt;&lt;strong&gt;Add the redux-thunk middleware to the store.&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import { createStore, applyMiddleware, compose } from "redux";  
import thunkMiddleware from "redux-thunk";  
import rootReducer from "../reducers";

const createStoreWithMiddleware = compose(  
  applyMiddleware(thunkMiddleware)
)(createStore);

export default function configureStore(initialState) {  
  const store = createStoreWithMiddleware(rootReducer);
  return store;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;configureStore.js&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This file just exports a function that returns the store to be added to the Provider element.&lt;/p&gt;

&lt;p&gt;Using compose to create the createStoreWithMiddleware function is just a fancier way of writing  &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;const store = createStore(  
    rootReducer,
    applyMiddleware(thunkMiddleware)
);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Write an action that returns a function.&lt;/strong&gt; This function will take the dispatch method as a parameter. You can use this to call subsequent actions.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import * as types from "../constants/ActionTypes";

export function receiveBooks(data) {  
  return {
    type: types.RECEIVE_BOOKS,
    books: data.books,
    categories: data.categories,
    genres: data.genres
  };
}

export function fetchBooks() {  
  return dispatch =&amp;gt; {
    fetch("/books.json").then(response =&amp;gt; {
        const data = response.json();
        dispatch(receiveBooks(data));
    })
    .catch(error =&amp;gt; 
        dispatch({ type: types.FETCH_FAILED, error })
    );
  };
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;book-actions.js&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In this action creator file, we have one standard action, receiveBooks() and one thunk(ed) action, fetchBooks(). fetchBooks() just defines an arrow function taking dispatch as a parameter. The receiveBooks action is dispatched on success.&lt;/p&gt;

&lt;h3 id="sagaaheroictaleofdispatching"&gt;Saga: A Heroic Tale Of Dispatching&lt;/h3&gt;

&lt;p&gt;"Again with the names, what's a saga?!" If you are or were a fan of fantasy or science fiction, you already know. For the others, a saga is just a series of connected stories.&lt;/p&gt;

&lt;p&gt;For the case of &lt;a href="https://github.com/yelouafi/redux-saga"&gt;redux-saga&lt;/a&gt;, I'll let the README do the honor:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Sagas are responsible for orchestrating complex/asynchronous operations.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Sagas are created using Generator functions.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Since sagas take advantage of the yield keyword to halt execution within a function, they empower you to write the steps necessary to complete your action and let the Javascript engine manage the execution. &lt;/p&gt;

&lt;p&gt;Executing functions in series can otherwise be tricky, your other option being a promise chain.&lt;/p&gt;

&lt;h6 id="howdoiusethisthing"&gt;How do I use this thing?&lt;/h6&gt;

&lt;p&gt;&lt;strong&gt;Add redux-saga middleware to the store.&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import { createStore, applyMiddleware, compose } from "redux";  
import createSagaMiddleware from "redux-saga";  
import rootReducer from "../reducers";

const sagaMiddleware = createSagaMiddleware();

const createStoreWithMiddleware = compose(  
  applyMiddleware(sagaMiddleware)
)(createStore);

export default function configureStore(initialState) {  
  const store = createStoreWithMiddleware(rootReducer);
  return store;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;configureStore.js&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Define your saga.&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import { takeLatest } from "redux-saga"  
import { call, put } from "redux-saga/effects"

function* fetchBooks(path) {  
   try {
      const data = yield call(fetch, path);
      yield put({type: "RECEIVE_BOOKS", data });
   } catch (e) {
      yield put({type: "FETCH_FAILED", message: e.message});
   }
}

function* fetchSaga() {  
  yield* takeLatest("FETCH_BOOKS", fetchBooks);
}

export default fetchSaga;  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;sagas/index.js&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;fetchSaga() listens for all FETCH_BOOKS actions and calls fetchBooks() once received. takeLatest() just means that if there are multiple actions fired, the most recent will be run and previous ones will be cancelled.&lt;/p&gt;

&lt;p&gt;What's the benefit of using a saga here?&lt;/p&gt;

&lt;p&gt;Since fetchBooks() as a saga is a Generator function, the call to the fetch api with the yield keyword will block until the promise is resolved. Also, since it is blocking, we can make use of try/catch for error handling.&lt;/p&gt;

&lt;p&gt;Another benefit is testing. The call and put methods return javascript objects, so in unit tests you can simply test each value yielded by your saga function with equality comparison. Testing thunks often requires complex mocking of the fetch api or other functions.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Import and run saga.&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import { createStore, applyMiddleware, compose } from "redux";  
import createSagaMiddleware from "redux-saga";  
import rootReducer from "../reducers";  
import fetchSaga from "../sagas";

const sagaMiddleware = createSagaMiddleware();

const createStoreWithMiddleware = compose(  
  applyMiddleware(sagaMiddleware)
)(createStore);

export default function configureStore(initialState) {  
  const store = createStoreWithMiddleware(rootReducer);
  sagaMiddleware.run(fetchSaga);
  return store;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;configureStore.js&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Since we already added the saga middleware to the store, the only thing that remains is to import and run the saga we defined.&lt;/p&gt;</description><link>http://blog.jakegardner.me/redux-thunk-vs-saga/</link><guid isPermaLink="false">f527e9a6-e071-40e5-81a3-1bacc8433f28</guid><category>redux</category><dc:creator>Jake Gardner</dc:creator><pubDate>Thu, 07 Jul 2016 00:49:43 GMT</pubDate></item><item><title>May Picks - Seven Databases, Seven Concurrency Models</title><description>&lt;p&gt;These books had been on my list for a while, I finally found an appropriate time to dive in. &lt;/p&gt;

&lt;h3 id="sevendatabasesinsevenweeks"&gt;Seven Databases In Seven Weeks&lt;/h3&gt;

&lt;p&gt;&lt;img src="http://blog.jakegardner.me/content/images/2016/06/sevendatabases.jpg" alt=""&gt;&lt;/p&gt;

&lt;p&gt;I've had experience with three of the databases in this book, Postgres, Redis, and Mongo. The others featured in this book, Riak, CouchDB, HBase, Neo4j are not as popular in the wild but still good to have in your toolbelt.&lt;/p&gt;

&lt;p&gt;I was most intrigued by Riak with its simple configuration of clusters and read/write consistency, and on a per-bucket basis. It also supports mapreduce. &lt;/p&gt;

&lt;p&gt;HBase I have seen around the web, but did not know that it powers core services at Facebook, Twitter, eBay, and others. This is the database for Big Data problems.&lt;/p&gt;

&lt;h3 id="sevenconcurrencymodelsinsevenweeks"&gt;Seven Concurrency Models In Seven Weeks&lt;/h3&gt;

&lt;p&gt;&lt;img src="http://blog.jakegardner.me/content/images/2016/06/seven-concurrency-models-in-seven-weeks-when-threads-unravel.jpg" alt=""&gt;&lt;/p&gt;

&lt;p&gt;A lot of the excitement around functional programming today is because it simplifies concurrency. This book explains how that's so, as well as the models of Go and Erlang. &lt;/p&gt;

&lt;p&gt;This is an essential text for all engineers. From the humble beginnings of concurrency (threads/locks), to functional programming, to better approaches (CSP), and the currently largest-scale concurrency model (MapReduce). Java, Clojure, and Elixir are used in the examples.&lt;/p&gt;</description><link>http://blog.jakegardner.me/may-picks-seven-databases-seven-concurrency-models/</link><guid isPermaLink="false">48181774-6ae1-460f-a06e-2214fa18a9ca</guid><dc:creator>Jake Gardner</dc:creator><pubDate>Thu, 09 Jun 2016 12:04:04 GMT</pubDate></item><item><title>Functional Fundamentals: Currying &amp; Partial Application</title><description>&lt;p&gt;This is part four in my series on functional programming fundamentals in Javascript. You can find the previous articles here: &lt;a href="http://blog.jakegardner.me/functional-fundamentals-pure-function"&gt;part one&lt;/a&gt;, &lt;a href="http://blog.jakegardner.me/functional-fundamentals-higher-order-functions/"&gt;part two&lt;/a&gt;, &lt;a href="http://blog.jakegardner.me/functional-fundamentals-compose/"&gt;part three&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Functional programming is full of non-obvious terminology, e.g. currying, but this is an important one to know. Currying is similar to but different from partial application, so we will compare these two today.&lt;/p&gt;

&lt;h3 id="currying"&gt;Currying&lt;/h3&gt;

&lt;p&gt;Currying is converting a function that takes many arguments into a function that takes a single argument, and returns a function accepting yet another single argument. This facilitates creating a chain of function calls in place of a single call with many arguments.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function sum(a, b) {  
    return a + b;
}
var addThese = sum.curry();  
addThese(2); // function waiting for b  
addThese(4); // 6  
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="partialapplication"&gt;Partial Application&lt;/h3&gt;

&lt;p&gt;Partial application is supplying some arguments to a function and receiving a function back that can accept additional arguments.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function sum(a, b) {  
    return a + b;
}
var addThese = sum.partialApply(3);  
addThese(); // 3  
addThese(5, 7); // 15  
addThese(9); // 24  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The key distinction between currying and partial application is that partially-applied functions always return a value, whereas curried functions return a function until the expected number of arguments have been received. &lt;/p&gt;</description><link>http://blog.jakegardner.me/functional-fundamentals-currying-partial-application/</link><guid isPermaLink="false">c769c60f-aa10-46db-a979-92e4a7fcd51e</guid><dc:creator>Jake Gardner</dc:creator><pubDate>Fri, 03 Jun 2016 11:36:55 GMT</pubDate></item><item><title>Functional Fundamentals: Compose</title><description>&lt;p&gt;This is part three in a series on functional programming concepts. Here are parts &lt;a href="http://blog.jakegardner.me/functional-fundamentals-pure-function/"&gt;one&lt;/a&gt; and &lt;a href="http://blog.jakegardner.me/functional-fundamentals-higher-order-functions/"&gt;two&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Last time we looked at building up a chain of operations with higher-order functions. While this method works, it quickly becomes verbose. There is a better way!&lt;/p&gt;

&lt;p&gt;Compose is an often used function in functional programming. It allows you to chain functions together that accept a single argument and return the type that the next function is expecting.&lt;/p&gt;

&lt;p&gt;Going with our example from part two:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function discount(x) {  
    return 0.8 * x;
}

function half(x) {  
    return x / 2;
}

var discountHalfPrice = compose(discount, half);  
discountHalfPrice(10); // 4  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What is compose doing under the hood? It accepts two functions as parameters and returns a function that accepts an argument. When this returned function is called, the argument is passed to the right function, the result of that then passed to the left function. With compose, it's key to remember that functions are processed right to left.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function compose(f, g) {  
    return function(x) {
         return f(g(x));   
    };
}
&lt;/code&gt;&lt;/pre&gt;</description><link>http://blog.jakegardner.me/functional-fundamentals-compose/</link><guid isPermaLink="false">6b01ca47-298a-4ded-8093-2fe26dc3ec3d</guid><dc:creator>Jake Gardner</dc:creator><pubDate>Sat, 14 May 2016 21:56:08 GMT</pubDate></item><item><title>Functional Fundamentals: Higher Order Functions</title><description>&lt;p&gt;This is part two in my series on functional programming concepts. Last time, we learned about &lt;a href="http://blog.jakegardner.me/functional-fundamentals-pure-function/"&gt;pure functions&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This time, we are going to learn about higher order functions. This is &lt;em&gt;the&lt;/em&gt; feature that makes functional programming possible.&lt;/p&gt;

&lt;p&gt;You know what a function is. But, what does &lt;em&gt;higher order&lt;/em&gt; mean?&lt;/p&gt;

&lt;h4 id="functioninafunction"&gt;Function In A Function&lt;/h4&gt;

&lt;p&gt;A higher order function is one that takes a function as a parameter, and returns a new function as a result.&lt;/p&gt;

&lt;p&gt;Here is an example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function getPrice() {  
    return 10;
}

function half(func) {  
    return function() {
        return func() / 2;
    };
}

var halfPrice = half(getPrice);  
halfPrice(); // 5  
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id="sowhat"&gt;So What?&lt;/h4&gt;

&lt;p&gt;Higher order functions allow us to feed one function into another many times over, building up a chain of operations to which can be triggered with a single function call.&lt;/p&gt;

&lt;p&gt;Take a moment to appreciate the power of this.&lt;/p&gt;

&lt;p&gt;Now you are able to construct things like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function getPrice() {  
    return 10;
}

function half(func) {  
    return function() {
        return func() / 2;
    };
}

var halfPrice = half(getPrice);  
halfPrice(); // 5

function discount(func) {  
    return function() {
        return 0.80 * func();
    };
}

var discountHalfPrice = discount(halfPrice);  
discountHalfPrice(); // 4  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ofcourse this is a contrived example, but the idea is that you can perform a series a small operations using a single function call. Eventually, this could trigger your entire program.&lt;/p&gt;

&lt;p&gt;Next, we will look at how we can extend this idea to combining multiple functions at the same time - with compose.&lt;/p&gt;</description><link>http://blog.jakegardner.me/functional-fundamentals-higher-order-functions/</link><guid isPermaLink="false">2c20688a-5210-409e-a87f-aed98699105c</guid><dc:creator>Jake Gardner</dc:creator><pubDate>Thu, 05 May 2016 16:10:16 GMT</pubDate></item><item><title>April Picks - FP, Asynchrony</title><description>&lt;h3 id="functionalprogramminginjavascript"&gt;Functional Programming in Javascript&lt;/h3&gt;

&lt;p&gt;&lt;img src="http://blog.jakegardner.me/content/images/2016/05/fpjs.jpeg" alt=""&gt;
Lately, I have been trying to dedicate some time to get more into functional programming. Since I have a background in Java, I first started with Scala but ultimately found the resources I could find a bit too academic. &lt;/p&gt;

&lt;p&gt;I thought this book by Dan Mantyla was easy to understand yet still explained quite a lot. It gently increases from map/filter/reduce to showing how Currying &amp;amp; compose work to Category Theory. The last chapter is dedicated to showing how to mix Javascript's two paradigms, object-oriented and functional, to write applications. &lt;/p&gt;

&lt;p&gt;So I think this an ideal starting point for an FP beginner, especially coming from the Javascript perspective.&lt;/p&gt;

&lt;p&gt;A good follow-up from this could be the &lt;a href="https://drboolean.gitbooks.io/mostly-adequate-guide/content/"&gt;mostly adequate guide&lt;/a&gt; by Brian Lansdorf.&lt;/p&gt;

&lt;h3 id="rethinkingasynchronousjavascript"&gt;Rethinking Asynchronous Javascript&lt;/h3&gt;

&lt;p&gt;There is probably no more in-depth resource on this topic than &lt;a href="https://frontendmasters.com/courses/rethinking-async-js/"&gt;this course&lt;/a&gt; by Kyle Simpson for Front-End Masters.&lt;/p&gt;

&lt;p&gt;Kyle demonstrates all of the available asynchrony models in Javascript, from Promises, to Generators, to Observables, to CSP. This would be an excellent guide if you're just getting into dealing with asynchrony in Javascript or you've been away and want to see what's changed.&lt;/p&gt;

&lt;p&gt;I know for me, Generators are not something I've really thought a lot about, and Kyle showed how they can be used effectively for flow control.&lt;/p&gt;</description><link>http://blog.jakegardner.me/april-picks/</link><guid isPermaLink="false">e539110b-5add-4b9e-82ec-3a32e7d24f26</guid><category>picks</category><dc:creator>Jake Gardner</dc:creator><pubDate>Mon, 02 May 2016 15:44:30 GMT</pubDate></item><item><title>Functional Fundamentals: Pure Function</title><description>&lt;p&gt;This is the first part of a series covering some topics from functional programming. &lt;/p&gt;

&lt;p&gt;What's functional programming? You can read entire books to answer that question, but I will just say that it is a programming paradigm in which a program is constructed with a series of simple, &lt;em&gt;pure&lt;/em&gt; functions.&lt;/p&gt;

&lt;p&gt;This is contrasted with the imperative paradigm, in which you probably learn to program, where you write a series of instructions and conditional branches.&lt;/p&gt;

&lt;p&gt;Whether you learn functional programming or not is another question, but you will see many of these concepts around the web (and in more and more frameworks) so you should understand what they mean.&lt;/p&gt;

&lt;h4 id="whatsapurefunction"&gt;What's a pure function?&lt;/h4&gt;

&lt;p&gt;A pure function is a function that does not modify any part of your program other than its parameters. &lt;/p&gt;

&lt;p&gt;For example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function createThing(name) {  
    var thing = {};
    thing.name = name;
    return thing;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This function makes use of its parameter, but does not touch anything outside the function itself.&lt;/p&gt;

&lt;p&gt;Contrast this with an impure version of this function:  &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var myThings = [];  
...
function createThing(name) {  
    var thing = {};
    thing.name = name;
    myThings.push(thing);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Even though this is valid code, the function is changing something beyond its responsibility. This is called a &lt;em&gt;side-effect&lt;/em&gt;.&lt;/p&gt;

&lt;h4 id="sowhat"&gt;So what?&lt;/h4&gt;

&lt;p&gt;Even if you have no desire to become a functional programmer, writing as many of your functions as possible in a pure way only has benefits for you and others that may read/use your code.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Pure functions make your code easier to understand.&lt;/strong&gt; If you write your functions in a pure way, then when another programmer or a much later you reads the code, they will be able to easily predict what will happen in the program just by reading the function names. If there are side effects within your functions, it may be difficult to debug, refactor or understand the order in which things are happening.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Pure functions are easier to test.&lt;/strong&gt; Including references to objects outside your functions makes them difficult to test because those objects may not be accessible in a test scenario. This is where mocking comes in. However, depending on what you need to mock, this can be quite complicated. Make it easy on yourself to write those unit tests.&lt;/p&gt;</description><link>http://blog.jakegardner.me/functional-fundamentals-pure-function/</link><guid isPermaLink="false">a860cc67-a6ef-4ca5-a4a9-092023ce5278</guid><dc:creator>Jake Gardner</dc:creator><pubDate>Tue, 26 Apr 2016 16:52:30 GMT</pubDate></item><item><title>Extract Fetch calls with Redux Middleware</title><description>&lt;p&gt;The first thing a lot of people coming to the React side-of-things ask is, "what about async actions?" (I did too). &lt;br&gt;
Since React is unopinionated on this point, you can do it however you like. &lt;/p&gt;

&lt;p&gt;However, since I use Redux for any substantial application I develop with React, I wanted to find a good pattern to use to handle asynchronous behavior that takes advantage of the plumbing available.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;I specifically use &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API"&gt;Web API Fetch&lt;/a&gt; in this article, but any HTTP request library could be substituted.&lt;/em&gt;&lt;/p&gt;

&lt;h4 id="asyncactioncreators"&gt;Async Action Creators&lt;/h4&gt;

&lt;p&gt;A pattern offered in the Redux documentation is to have some action creators perform these asynchronous actions for you. I initially used this pattern.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;A pre-requisite here is to include the &lt;a href="https://github.com/gaearon/redux-thunk"&gt;redux-thunk&lt;/a&gt; middleware. All this does is allow you to dispatch a function in addition to plain objects. See &lt;a href="https://github.com/gaearon/redux-thunk"&gt;this&lt;/a&gt; for more details.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Your asynchronous action creator will be something like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;export function fetchData(itemId) {  
    return dispatch =&amp;gt; {
        fetch(`${API}/items/${itemId}`, {
            method: "GET",
            headers: new Headers({
                "Authorization": `Bearer ${TOKEN}`
            })
        })
        .then( response =&amp;gt; response.json() )
        .then( json =&amp;gt; dispatch(fetchDataSuccess(json)) )
        .catch( error =&amp;gt; dispatch(fetchDataFailure(error)) );
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So in contrast to standard synchronous action creators which return a plain object, you return a function which takes dispatch as a parameter. Inside this function you perform your asynchronous behavior and potentially dispatch another function on completion.&lt;/p&gt;

&lt;p&gt;With any substantial application, the number of these kinds of actions can grow wildly. Furthermore, they can be quite verbose depending on what parameters we need to pass to Fetch. Being diligent programmers that we are, we recognize this is an opportunity to eliminate redundancy by extracting these Fetch calls elsewhere.&lt;/p&gt;

&lt;p&gt;You could easily create a module an just require it in every action file, but that approach also has some degree of repetition. Fortunately, Redux's middleware mechanism is designed for just this type of situation.&lt;/p&gt;

&lt;h4 id="fetchmiddleware"&gt;Fetch Middleware&lt;/h4&gt;

&lt;p&gt;Let's create a middleware that performs the Fetch if a Fetch parameter object exists in the action. We can define the properties of this object however we like. I have just included the most common Fetch parameters as well as success and failure handlers.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;const fetchMiddleware = store =&amp;gt; next =&amp;gt; action =&amp;gt; {  
    if (!action || !action.fetchConfig) {
        return next(action)
    }

    let dispatch = store.dispatch
    let config = action.fetchConfig
    dispatch(config.init)

    const path = config.path || "/"
    const method = config.method || "GET"
    const headers = config.headers
    const body = config.body
    const successHandler = config.success
    const failureHandler = config.failure

    fetch(path, {
        method: method,
        headers: headers,
        body: JSON.stringify(body)
    })
    .then( response =&amp;gt; response.json() )
    .then( json =&amp;gt; successHandler(json) )
    .catch( error =&amp;gt; failureHandler(error) )

}

export default fetchMiddleware  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A middleware is defined as a function that takes the store as a parameter, returns a function which takes the next middleware as parameter, which in turn returns a function that takes an action to run. (mind bent yet?)&lt;/p&gt;

&lt;p&gt;For a detailed walkthrough of how middleware works and a number of other use cases, see the excellent write-up  &lt;a href="http://redux.js.org/docs/advanced/Middleware.html"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So we just check for the existence of fetchConfig on the action and proceed if so. If not, then we hand off to the next middleware.&lt;/p&gt;

&lt;p&gt;Our function just takes apart the config object and sets any defaults as necessary. Then, execute the Fetch call and any handlers for Promise resolution.&lt;/p&gt;

&lt;p&gt;If your success/failure handler is another action, you can just change the then/catch block to:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    .then( json =&amp;gt; {
        dispatch(successHandler(json))
    })
    .catch( error =&amp;gt; dispatch(failureHandler(error)) )
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, we can include our middleware in the createStore method to ensure it's called as part of the action flow.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;let app = combineReducers(reducers)  
let store = createStore(  
  app,
  applyMiddleware(thunk, fetchMiddleware)
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Lastly, we just update the action creator to pass the fetchConfig object.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;export function fetchData(itemId) {  
    return {
        type: "FETCH_ITEM",
        fetchConfig: {
            path: `${API}/items/${itemId}`,
            method: "GET",
            headers: {
                "Authorization": `Bearer ${TOKEN}`
            }
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;</description><link>http://blog.jakegardner.me/consolidate-fetch-with-redux-middleware/</link><guid isPermaLink="false">3a909a86-bad6-4185-98bc-7ad281fa4b6f</guid><category>redux</category><dc:creator>Jake Gardner</dc:creator><pubDate>Mon, 11 Apr 2016 23:06:02 GMT</pubDate></item><item><title>February Picks - Ruby, OOD</title><description>&lt;p&gt;In February, I was focused on Ruby. While familiar with the basics of Ruby and Rails, I wanted to dive deeper and discover any details that might be useful in projects I currently have in mind. Let's get into it!&lt;/p&gt;

&lt;h4 id="thewellgroundedrubyist"&gt;The Well-Grounded Rubyist&lt;/h4&gt;

&lt;p&gt;&lt;img src="http://blog.jakegardner.me/content/images/2016/03/wellgroundedrubyist.jpeg" alt=""&gt;
This book provides a comprehensive overview of the Ruby language, introducing a bit about The Ruby Way and features that are unique to the language.&lt;/p&gt;

&lt;p&gt;As an experienced user of other programming languages, I find Ruby easy to read and understand but there are a few features that are not obvious to the uninitiated. The Well-Grounded Rubyist shed light on those areas. Particularly relevant for me was discussion on when to use modules vs classes, and the logic behind Symbols. &lt;/p&gt;

&lt;p&gt;This book is a great step-up for the beginning Rubyist and likely a worthy reference for the more experienced.&lt;/p&gt;

&lt;h4 id="practicalobjectorienteddesigninruby"&gt;Practical Object-Oriented Design in Ruby&lt;/h4&gt;

&lt;p&gt;&lt;img src="http://blog.jakegardner.me/content/images/2016/03/practicaloodruby.jpg" alt=""&gt;
I was quite surprised to discover that this book not only shows object-oriented design techniques using Ruby, but is actually the most succinct and clear description of general OOD that I have read. I would recommend this book if you do any OOD, even if it's not in Ruby.&lt;/p&gt;

&lt;p&gt;Sandi Metz first introduces object-oriented principles and general coding best-practices, then takes simple examples through multiple evolutions of design and refactoring to broaden how you think of object-oriented design and expose flaws in common approaches.&lt;/p&gt;

&lt;p&gt;The key takeaway for me was to think of design in terms of messages rather than objects. If you only think of concrete entities when coming up with objects, you will miss some important objects and introduce unnecessary coupling. When you discover this later on, refactoring is painful and expensive. I have experienced this first-hand.&lt;/p&gt;</description><link>http://blog.jakegardner.me/february-reading/</link><guid isPermaLink="false">8249b9d6-d034-472a-8d32-3137f1354bda</guid><category>ruby</category><category>picks</category><dc:creator>Jake Gardner</dc:creator><pubDate>Thu, 03 Mar 2016 07:19:36 GMT</pubDate></item></channel></rss>