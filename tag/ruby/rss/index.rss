<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>ruby - Jake Gardner</title><description>Explorations in development.</description><link>http://localhost:2368/</link><generator>Ghost 0.5</generator><lastBuildDate>Mon, 11 Apr 2016 23:09:28 GMT</lastBuildDate><atom:link href="http://localhost:2368/tag/ruby/rss/" rel="self" type="application/rss+xml"/><ttl>60</ttl><item><title>February Reading</title><description>&lt;p&gt;In February, I was focused on Ruby. While familiar with the basics of Ruby and Rails, I wanted to dive deeper and discover any details that might be useful in projects I currently have in mind. Let's get into it!&lt;/p&gt;

&lt;h4 id="thewellgroundedrubyist"&gt;The Well-Grounded Rubyist&lt;/h4&gt;

&lt;p&gt;&lt;img src="http://localhost:2368/content/images/2016/03/wellgroundedrubyist.jpeg" alt=""&gt;
This book provides a comprehensive overview of the Ruby language, introducing a bit about The Ruby Way and features that are unique to the language.&lt;/p&gt;

&lt;p&gt;As an experienced user of other programming languages, I find Ruby easy to read and understand but there are a few features that are not obvious to the uninitiated. The Well-Grounded Rubyist shed light on those areas. Particularly relevant for me was discussion on when to use modules vs classes, and the logic behind Symbols. &lt;/p&gt;

&lt;p&gt;This book is a great step-up for the beginning Rubyist and likely a worthy reference for the more experienced.&lt;/p&gt;

&lt;h4 id="practicalobjectorienteddesigninruby"&gt;Practical Object-Oriented Design in Ruby&lt;/h4&gt;

&lt;p&gt;&lt;img src="http://localhost:2368/content/images/2016/03/practicaloodruby.jpg" alt=""&gt;
I was quite surprised to discover that this book not only shows object-oriented design techniques using Ruby, but is actually the most succinct and clear description of general OOD that I have read. I would recommend this book if you do any OOD, even if it's not in Ruby.&lt;/p&gt;

&lt;p&gt;Sandi Metz first introduces object-oriented principles and general coding best-practices, then takes simple examples through multiple evolutions of design and refactoring to broaden how you think of object-oriented design and expose flaws in common approaches.&lt;/p&gt;

&lt;p&gt;The key takeaway for me was to think of design in terms of messages rather than objects. If you only think of concrete entities when coming up with objects, you will miss some important objects and introduce unnecessary coupling. When you discover this later on, refactoring is painful and expensive. I have experienced this first-hand.&lt;/p&gt;</description><link>http://localhost:2368/february-reading/</link><guid isPermaLink="false">8249b9d6-d034-472a-8d32-3137f1354bda</guid><category>ruby</category><dc:creator>Jake Gardner</dc:creator><pubDate>Thu, 03 Mar 2016 07:19:36 GMT</pubDate></item></channel></rss>